{"ast":null,"code":"var _jsxFileName = \"/Users/drewstephenson/Documents/3DPortIntel/src/Globe.js\";\nimport React, { Component } from \"react\"; // import './styles/App.scss';\n\nimport * as THREE from \"three\";\nimport * as _ from \"lodash\"; // import Moment from 'react-moment';\n\nimport moment from \"moment\"; // import map from \"./earth-dark.jpg\";\n\nimport map from \"./earthmap1k.jpg\"; // import gsap from \"gsap\";\n\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { DragControls } from \"three/examples/jsm/controls/DragControls\";\nimport { shuffle, isWinningCombination } from \"./helper/helper\";\nimport { rubik_colors, color_opt_array } from \"./cubes/colors\";\nimport { getDraggableIntersectionsOfSelectedSq, getAvailableSqByDirection } from \"./helper/intersects\"; // import { generateGameboardCubes, generateMasterCubes } from './cubes/gameboard';\n// import { generateMasterCubeDisplay } from './controls/controls';\n\nimport fragment from \"./utils/shader/fragment.glsl\"; // // import vertex from \"./shader/vertex.glsl”;\n\nimport { BsChevronDown, BsChevronLeft, BsChevronRight, BsChevronUp } from \"react-icons/bs\";\nimport { FiMenu } from \"react-icons/fi\"; // debuger\n// const gui = new dat.GUI({ closed: true });\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst globeRadius = 3; // global\n\nlet camera, dragControls, scene, renderer, appEl;\nlet controls;\nlet cubes = [];\nlet globeGroup; // let setInervalTimer;\n\nlet masterGameMap = new Map();\nconst boardGameMap = new Map();\nconst game_map_row1 = new Map();\nconst game_map_row2 = new Map();\nconst game_map_row3 = new Map();\nconst boardGameMap_row1 = new Map();\nconst boardGameMap_row2 = new Map();\nconst boardGameMap_row3 = new Map();\nmasterGameMap.set(0, game_map_row1);\nmasterGameMap.set(1, game_map_row2);\nmasterGameMap.set(2, game_map_row3);\nboardGameMap.set(0, boardGameMap_row1);\nboardGameMap.set(1, boardGameMap_row2);\nboardGameMap.set(2, boardGameMap_row3);\n\nclass Globe extends Component {\n  constructor() {\n    super();\n\n    this.bindKeyPress = () => {\n      window.addEventListener(\"keydown\", e => {\n        e.preventDefault();\n        let isAnimating = false;\n\n        if (!this.debouncedFn) {\n          this.debouncedFn = _.debounce(key => {\n            switch (key) {\n              case \"ArrowLeft\":\n                // left\n                break;\n\n              case \"ArrowUp\":\n                // up\n                break;\n\n              case \"ArrowRight\":\n                // right\n                break;\n\n              case \"ArrowDown\":\n                // down\n                break;\n\n              default:\n                return;\n              // exit this handler\n            }\n          }, 100);\n        }\n\n        if (!isAnimating) {\n          isAnimating = true;\n          this.debouncedFn(e.key);\n        }\n      });\n    };\n\n    this.bindResize = () => {\n      window.addEventListener(\"resize\", e => {\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n      });\n    };\n\n    this.generateGridHelper = () => {\n      var standardPlaneNormal = new THREE.Vector3(0, 0, 1);\n      var GridHelperPlaneNormal = new THREE.Vector3(0, 1, 0);\n      var GridHelperPlaneMaster = new THREE.Vector3(0, 1, 0);\n      var quaternion = new THREE.Quaternion();\n      quaternion.setFromUnitVectors(standardPlaneNormal, GridHelperPlaneNormal);\n      var masterQuaternion = new THREE.Quaternion();\n      masterQuaternion.setFromUnitVectors(standardPlaneNormal, GridHelperPlaneMaster);\n      var largeGridGuide = new THREE.GridHelper(10, 10);\n      largeGridGuide.rotation.setFromQuaternion(quaternion);\n      scene.add(largeGridGuide);\n    };\n\n    this.animation = _time => {\n      cubes.forEach(o => {\n        o.userData.update(o);\n      });\n      controls.update();\n      renderer.render(scene, camera);\n    };\n\n    this.calcPosFromLatLonRadN = (lat, lon, radius) => {\n      const phi = lat * (Math.PI / 180);\n      const theta = -lon * (Math.PI / 180);\n      var x = radius * Math.cos(phi) * Math.cos(theta);\n      var y = radius * Math.cos(phi) * Math.sin(theta);\n      var z = radius * Math.sin(phi);\n      return {\n        x,\n        y,\n        z\n      };\n    };\n\n    this.init = () => {\n      globeGroup = new THREE.Group();\n      camera = new THREE.PerspectiveCamera(90, window.innerWidth / window.innerHeight, 0.01, 100);\n      camera.position.z = 6;\n      scene = new THREE.Scene();\n      renderer = new THREE.WebGLRenderer({\n        antialias: true,\n        alpha: true\n      });\n      renderer.setClearColor(0x000000, 0); // the default\n\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      renderer.setPixelRatio(Math.min(window.devicePixelRatio, 1));\n      renderer.setAnimationLoop(this.animation);\n      controls = new OrbitControls(camera, appEl);\n      controls.enableDamping = true;\n      const materialShader = new THREE.ShaderMaterial({\n        extensions: {\n          derivatives: \"#extension GL_OES_standard_derivatives : enable\"\n        },\n        side: THREE.DoubleSide,\n        uniforms: {\n          time: {\n            value: 0\n          },\n          resolution: {\n            value: new THREE.Vector4()\n          }\n        },\n        // wireframe: true,\n        transparent: true,\n        //       vertexShader: vertex,\n        fragmentShader: fragment\n      }); // setup Map\n\n      const axesHelper = new THREE.AxesHelper(5);\n      scene.add(axesHelper);\n      const globeGeo = new THREE.SphereBufferGeometry(globeRadius);\n      const material = new THREE.MeshBasicMaterial({\n        map: new THREE.TextureLoader().load(map)\n      });\n      const globe = new THREE.Mesh(globeGeo, material); //     const atl = [33.749, -84];\n      //     const chi = [41.8781, -87.6298];\n      //     const atlv = this.calcPosFromLatLonRadN(atl[0], atl[1], globeRadius);\n      //     let atlMesh = new THREE.Mesh(\n      //       new THREE.SphereBufferGeometry(0.03, 20, 20),\n      //       new THREE.MeshBasicMaterial({ color: 0xad1001 })\n      //     );\n      //     atlMesh.position.set(atlv.x, atlv.z, atlv.y);\n      //     globeGroup.add(atlMesh);\n      //     const chiV = this.calcPosFromLatLonRadN(chi[0], chi[1], globeRadius);\n      //     let chiMesh = new THREE.Mesh(\n      //       new THREE.SphereBufferGeometry(0.03, 20, 20),\n      //       new THREE.MeshBasicMaterial({ color: 0xf04e37 })\n      //     );\n      //     chiMesh.position.set(chiV.x, chiV.z, chiV.y);\n      //     globeGroup.add(chiMesh);\n\n      globeGroup.add(globe);\n      let point1 = {\n        lat: 33.749,\n        lng: -84\n      };\n      let point2 = {\n        lat: 41.8781,\n        lng: -87.6298\n      };\n      let point3 = {\n        lat: 34.0522,\n        lng: -118.2437\n      };\n      let flight = [point1, point2, point3];\n\n      for (var i = 0; i < flight.length; i++) {\n        let pos = this.calcPosFromLatLonRadN(flight[i].lat, flight[i].lng, globeRadius);\n        let mesh = new THREE.Mesh(new THREE.SphereBufferGeometry(0.03, 20, 20), new THREE.MeshBasicMaterial({\n          color: 0xff0000\n        }) // this.material\n        );\n        mesh.position.set(pos.x, pos.z, pos.y);\n        scene.add(mesh);\n\n        if (i < flight.length - 1) {\n          let pos1 = this.calcPosFromLatLonRadN(flight[i + 1].lat, flight[i + 1].lng, globeRadius);\n          this.getCurve(pos, pos1);\n        }\n      }\n\n      scene.add(globeGroup);\n      appEl.appendChild(renderer.domElement);\n    };\n\n    this.state = {\n      startTime: 0,\n      clock: 0,\n      masterCubeArr: []\n    };\n  }\n\n  componentDidMount() {\n    appEl = document.getElementsByClassName(\"webgl\")[0];\n    this.init();\n    this.bindResize();\n    this.bindKeyPress();\n  }\n\n  getCurve(p1, p2) {\n    let v1 = new THREE.Vector3(p1.x, p1.z, p1.y);\n    let v2 = new THREE.Vector3(p2.x, p2.z, p2.y);\n    let points = [];\n\n    for (let i = 0; i <= 20; i++) {\n      let p = new THREE.Vector3().lerpVectors(v1, v2, i / 20);\n      console.log(\"getCurve ==> \", p); //     p.normalize();\n\n      p.multiplyScalar(1 + 0.1 * Math.sin(Math.PI * i / 20));\n      points.push(p);\n    }\n\n    let path = new THREE.CatmullRomCurve3(points, false);\n    const geometry = new THREE.TubeGeometry(path, 72, 0.01, 5, false);\n    const material = this.materialShader;\n    const mesh = new THREE.Mesh(geometry, material);\n    globeGroup.add(mesh);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"webgl\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport default Globe;","map":{"version":3,"sources":["/Users/drewstephenson/Documents/3DPortIntel/src/Globe.js"],"names":["React","Component","THREE","_","moment","map","OrbitControls","DragControls","shuffle","isWinningCombination","rubik_colors","color_opt_array","getDraggableIntersectionsOfSelectedSq","getAvailableSqByDirection","fragment","BsChevronDown","BsChevronLeft","BsChevronRight","BsChevronUp","FiMenu","globeRadius","camera","dragControls","scene","renderer","appEl","controls","cubes","globeGroup","masterGameMap","Map","boardGameMap","game_map_row1","game_map_row2","game_map_row3","boardGameMap_row1","boardGameMap_row2","boardGameMap_row3","set","Globe","constructor","bindKeyPress","window","addEventListener","e","preventDefault","isAnimating","debouncedFn","debounce","key","bindResize","aspect","innerWidth","innerHeight","updateProjectionMatrix","setSize","generateGridHelper","standardPlaneNormal","Vector3","GridHelperPlaneNormal","GridHelperPlaneMaster","quaternion","Quaternion","setFromUnitVectors","masterQuaternion","largeGridGuide","GridHelper","rotation","setFromQuaternion","add","animation","_time","forEach","o","userData","update","render","calcPosFromLatLonRadN","lat","lon","radius","phi","Math","PI","theta","x","cos","y","sin","z","init","Group","PerspectiveCamera","position","Scene","WebGLRenderer","antialias","alpha","setClearColor","setPixelRatio","min","devicePixelRatio","setAnimationLoop","enableDamping","materialShader","ShaderMaterial","extensions","derivatives","side","DoubleSide","uniforms","time","value","resolution","Vector4","transparent","fragmentShader","axesHelper","AxesHelper","globeGeo","SphereBufferGeometry","material","MeshBasicMaterial","TextureLoader","load","globe","Mesh","point1","lng","point2","point3","flight","i","length","pos","mesh","color","pos1","getCurve","appendChild","domElement","state","startTime","clock","masterCubeArr","componentDidMount","document","getElementsByClassName","p1","p2","v1","v2","points","p","lerpVectors","console","log","multiplyScalar","push","path","CatmullRomCurve3","geometry","TubeGeometry"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n// import './styles/App.scss';\nimport * as THREE from \"three\";\nimport * as _ from \"lodash\";\n// import Moment from 'react-moment';\nimport moment from \"moment\";\n// import map from \"./earth-dark.jpg\";\nimport map from \"./earthmap1k.jpg\";\n\n// import gsap from \"gsap\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { DragControls } from \"three/examples/jsm/controls/DragControls\";\nimport { shuffle, isWinningCombination } from \"./helper/helper\";\nimport { rubik_colors, color_opt_array } from \"./cubes/colors\";\nimport {\n  getDraggableIntersectionsOfSelectedSq,\n  getAvailableSqByDirection,\n} from \"./helper/intersects\";\n// import { generateGameboardCubes, generateMasterCubes } from './cubes/gameboard';\n// import { generateMasterCubeDisplay } from './controls/controls';\n\nimport fragment from \"./utils/shader/fragment.glsl\";\n// // import vertex from \"./shader/vertex.glsl”;\nimport {\n  BsChevronDown,\n  BsChevronLeft,\n  BsChevronRight,\n  BsChevronUp,\n} from \"react-icons/bs\";\nimport { FiMenu } from \"react-icons/fi\";\n\n// debuger\n// const gui = new dat.GUI({ closed: true });\n\nconst globeRadius = 3;\n// global\nlet camera, dragControls, scene, renderer, appEl;\nlet controls;\nlet cubes = [];\nlet globeGroup;\n// let setInervalTimer;\n\nlet masterGameMap = new Map();\nconst boardGameMap = new Map();\n\nconst game_map_row1 = new Map();\nconst game_map_row2 = new Map();\nconst game_map_row3 = new Map();\n\nconst boardGameMap_row1 = new Map();\nconst boardGameMap_row2 = new Map();\nconst boardGameMap_row3 = new Map();\n\nmasterGameMap.set(0, game_map_row1);\nmasterGameMap.set(1, game_map_row2);\nmasterGameMap.set(2, game_map_row3);\n\nboardGameMap.set(0, boardGameMap_row1);\nboardGameMap.set(1, boardGameMap_row2);\nboardGameMap.set(2, boardGameMap_row3);\n\nclass Globe extends Component {\n  constructor() {\n    super();\n    this.state = {\n      startTime: 0,\n      clock: 0,\n      masterCubeArr: [],\n    };\n  }\n\n  componentDidMount() {\n    appEl = document.getElementsByClassName(\"webgl\")[0];\n    this.init();\n    this.bindResize();\n    this.bindKeyPress();\n  }\n\n  bindKeyPress = () => {\n    window.addEventListener(\"keydown\", (e) => {\n      e.preventDefault();\n\n      let isAnimating = false;\n\n      if (!this.debouncedFn) {\n        this.debouncedFn = _.debounce((key) => {\n          switch (key) {\n            case \"ArrowLeft\": // left\n              break;\n\n            case \"ArrowUp\": // up\n              break;\n\n            case \"ArrowRight\": // right\n              break;\n\n            case \"ArrowDown\": // down\n              break;\n            default:\n              return; // exit this handler\n          }\n        }, 100);\n      }\n\n      if (!isAnimating) {\n        isAnimating = true;\n        this.debouncedFn(e.key);\n      }\n    });\n  };\n\n  bindResize = () => {\n    window.addEventListener(\"resize\", (e) => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    });\n  };\n\n  generateGridHelper = () => {\n    var standardPlaneNormal = new THREE.Vector3(0, 0, 1);\n    var GridHelperPlaneNormal = new THREE.Vector3(0, 1, 0);\n    var GridHelperPlaneMaster = new THREE.Vector3(0, 1, 0);\n\n    var quaternion = new THREE.Quaternion();\n    quaternion.setFromUnitVectors(standardPlaneNormal, GridHelperPlaneNormal);\n\n    var masterQuaternion = new THREE.Quaternion();\n    masterQuaternion.setFromUnitVectors(\n      standardPlaneNormal,\n      GridHelperPlaneMaster\n    );\n\n    var largeGridGuide = new THREE.GridHelper(10, 10);\n    largeGridGuide.rotation.setFromQuaternion(quaternion);\n\n    scene.add(largeGridGuide);\n  };\n\n  animation = (_time) => {\n    cubes.forEach((o) => {\n      o.userData.update(o);\n    });\n\n    controls.update();\n    renderer.render(scene, camera);\n  };\n\n  calcPosFromLatLonRadN = (lat, lon, radius) => {\n    const phi = lat * (Math.PI / 180);\n    const theta = -lon * (Math.PI / 180);\n\n    var x = radius * Math.cos(phi) * Math.cos(theta);\n    var y = radius * Math.cos(phi) * Math.sin(theta);\n    var z = radius * Math.sin(phi);\n    return { x, y, z };\n  };\n\n  init = () => {\n    globeGroup = new THREE.Group();\n    camera = new THREE.PerspectiveCamera(\n      90,\n      window.innerWidth / window.innerHeight,\n      0.01,\n      100\n    );\n    camera.position.z = 6;\n    scene = new THREE.Scene();\n\n    renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n    renderer.setClearColor(0x000000, 0); // the default\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 1));\n    renderer.setAnimationLoop(this.animation);\n\n    controls = new OrbitControls(camera, appEl);\n    controls.enableDamping = true;\n\nconst materialShader = new THREE.ShaderMaterial({\n      extensions: {\n        derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n      },\n      side: THREE.DoubleSide,\n      uniforms: {\n        time: { value: 0 },\n        resolution: { value: new THREE.Vector4() },\n      },\n      // wireframe: true,\n      transparent: true,\n      //       vertexShader: vertex,\n            fragmentShader: fragment,\n    });\n\n    // setup Map\n\n    const axesHelper = new THREE.AxesHelper(5);\n    scene.add(axesHelper);\n\n    const globeGeo = new THREE.SphereBufferGeometry(globeRadius);\n    const material = new THREE.MeshBasicMaterial({\n      map: new THREE.TextureLoader().load(map),\n    });\n\n    const globe = new THREE.Mesh(globeGeo, material);\n\n    //     const atl = [33.749, -84];\n    //     const chi = [41.8781, -87.6298];\n\n    //     const atlv = this.calcPosFromLatLonRadN(atl[0], atl[1], globeRadius);\n    //     let atlMesh = new THREE.Mesh(\n    //       new THREE.SphereBufferGeometry(0.03, 20, 20),\n    //       new THREE.MeshBasicMaterial({ color: 0xad1001 })\n    //     );\n    //     atlMesh.position.set(atlv.x, atlv.z, atlv.y);\n    //     globeGroup.add(atlMesh);\n\n    //     const chiV = this.calcPosFromLatLonRadN(chi[0], chi[1], globeRadius);\n    //     let chiMesh = new THREE.Mesh(\n    //       new THREE.SphereBufferGeometry(0.03, 20, 20),\n    //       new THREE.MeshBasicMaterial({ color: 0xf04e37 })\n    //     );\n    //     chiMesh.position.set(chiV.x, chiV.z, chiV.y);\n    //     globeGroup.add(chiMesh);\n    globeGroup.add(globe);\n\n    let point1 = {\n      lat: 33.749,\n      lng: -84,\n    };\n\n    let point2 = {\n      lat: 41.8781,\n      lng: -87.6298,\n    };\n\n    let point3 = {\n      lat: 34.0522,\n      lng: -118.2437,\n    };\n\n    let flight = [point1, point2, point3];\n\n    for (var i = 0; i < flight.length; i++) {\n      let pos = this.calcPosFromLatLonRadN(\n        flight[i].lat,\n        flight[i].lng,\n        globeRadius\n      );\n\n      let mesh = new THREE.Mesh(\n        new THREE.SphereBufferGeometry(0.03, 20, 20),\n        new THREE.MeshBasicMaterial({ color: 0xff0000 })\n        // this.material\n      );\n      mesh.position.set(pos.x, pos.z, pos.y);\n      scene.add(mesh);\n\n      if (i < flight.length - 1) {\n        let pos1 = this.calcPosFromLatLonRadN(\n          flight[i + 1].lat,\n          flight[i + 1].lng,\n          globeRadius\n        );\n        this.getCurve(pos, pos1);\n      }\n    }\n    scene.add(globeGroup);\n    appEl.appendChild(renderer.domElement);\n  };\n\n  getCurve(p1, p2) {\n    let v1 = new THREE.Vector3(p1.x, p1.z, p1.y);\n    let v2 = new THREE.Vector3(p2.x, p2.z, p2.y);\n    let points = [];\n\n    for (let i = 0; i <= 20; i++) {\n      let p = new THREE.Vector3().lerpVectors(v1, v2, i / 20);\n      console.log(\"getCurve ==> \", p);\n        //     p.normalize();\n            p.multiplyScalar(1 + 0.1 * Math.sin((Math.PI * i) / 20));\n      points.push(p);\n    }\n    let path = new THREE.CatmullRomCurve3(points, false);\n\n    const geometry = new THREE.TubeGeometry(path, 72, 0.01, 5, false);\n    const material = this.materialShader;\n    const mesh = new THREE.Mesh(geometry, material);\n    globeGroup.add(mesh);\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"webgl\"></div>\n      </>\n    );\n  }\n}\n\nexport default Globe;\n"]},"metadata":{},"sourceType":"module"}