{"ast":null,"code":"import React from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\"; // import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\n// import fragment from \"./shader/fragment.glsl\";\n// import vertex from \"./shader/vertex.glsl”;\n//\n\nimport * as dat from \"dat.gui\";\nimport gsap from \"gsap\";\nimport map from \"./earth-dark.jpg\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet masterScene;\nlet container;\nlet scene_width;\nlet scene_height;\nlet renderer;\nlet controls;\nlet camera;\nlet isPlaying;\nlet time; // export default class Sketch extends React.Component {\n\nfunction Globe() {\n  masterScene = new THREE.Scene();\n  container = document.getElementById(\"globe\");\n  scene_width = container.offsetWidth;\n  scene_height = container.offsetHeight;\n  renderer = new THREE.WebGLRenderer();\n  renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n  renderer.setSize(scene_width, scene_height);\n  renderer.setClearColor(0xeeeeee, 1);\n  container.appendChild(renderer.domElement);\n  camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.001, 1000);\n  camera.position.set(0, 0, 2);\n  controls = new OrbitControls(camera, renderer.domElement);\n  time = 0;\n  isPlaying = true;\n\n  const addPlanet = () => {\n    materialShader = new THREE.ShaderMaterial({\n      extensions: {\n        derivatives: \"#extension GL_OES_standard_derivatives : enable\"\n      },\n      side: THREE.DoubleSide,\n      uniforms: {\n        time: {\n          value: 0\n        },\n        resolution: {\n          value: new THREE.Vector4()\n        }\n      },\n      // wireframe: true,\n      transparent: true,\n      vertexShader: vertex,\n      fragmentShader: fragment\n    });\n    const material = new THREE.MeshBasicMaterial({\n      map: new THREE.TextureLoader().load(map)\n    });\n    const geometry = new THREE.SphereBufferGeometry(1, 30, 30);\n    const planet = new THREE.Mesh(geometry, material);\n    masterScene.add(planet);\n  };\n\n  const addObjects = () => {\n    addPlanel();\n  };\n\n  const resize = () => {\n    scene_width = container.offsetWidth;\n    scene_height = this.container.offsetHeight;\n    renderer.setSize(scene_width, scene_height);\n    camera.aspect = scene_width / scene_height;\n    camera.updateProjectionMatrix();\n  };\n\n  const render = () => {};\n\n  const setupResize = () => {\n    window.addEventListener(\"resize\", resize.bind(this));\n  };\n\n  addObjects(); // this.resize();\n  // this.render();\n  // this.setupResize();\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: \"Map\"\n  }, void 0, false);\n}\n\n_c = Globe;\nexport default Globe;\n\nvar _c;\n\n$RefreshReg$(_c, \"Globe\");","map":{"version":3,"sources":["/Users/drewstephenson/Documents/3DPortIntel/src/Globe.js"],"names":["React","THREE","OrbitControls","dat","gsap","map","masterScene","container","scene_width","scene_height","renderer","controls","camera","isPlaying","time","Globe","Scene","document","getElementById","offsetWidth","offsetHeight","WebGLRenderer","setPixelRatio","Math","min","window","devicePixelRatio","setSize","setClearColor","appendChild","domElement","PerspectiveCamera","innerWidth","innerHeight","position","set","addPlanet","materialShader","ShaderMaterial","extensions","derivatives","side","DoubleSide","uniforms","value","resolution","Vector4","transparent","vertexShader","vertex","fragmentShader","fragment","material","MeshBasicMaterial","TextureLoader","load","geometry","SphereBufferGeometry","planet","Mesh","add","addObjects","addPlanel","resize","aspect","updateProjectionMatrix","render","setupResize","addEventListener","bind"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\n// import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\n\n// import fragment from \"./shader/fragment.glsl\";\n// import vertex from \"./shader/vertex.glsl”;\n\n//\n\nimport * as dat from \"dat.gui\";\nimport gsap from \"gsap\";\n\nimport map from \"./earth-dark.jpg\";\n\nlet masterScene;\nlet container;\nlet scene_width;\nlet scene_height;\nlet renderer;\nlet controls;\nlet camera;\nlet isPlaying;\nlet time;\n\n// export default class Sketch extends React.Component {\nfunction Globe() {\n        masterScene = new THREE.Scene();\n  container = document.getElementById(\"globe\");\n  scene_width = container.offsetWidth;\n  scene_height = container.offsetHeight;\n  renderer = new THREE.WebGLRenderer();\n  renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n  renderer.setSize(scene_width, scene_height);\n  renderer.setClearColor(0xeeeeee, 1);\n  container.appendChild(renderer.domElement);\n\n  camera = new THREE.PerspectiveCamera(\n    70,\n    window.innerWidth / window.innerHeight,\n    0.001,\n    1000\n  );\n  camera.position.set(0, 0, 2);\n  controls = new OrbitControls(camera, renderer.domElement);\n  time = 0;\n  isPlaying = true;\n\n  const addPlanet = () => {\n    materialShader = new THREE.ShaderMaterial({\n      extensions: {\n        derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n      },\n      side: THREE.DoubleSide,\n      uniforms: {\n        time: { value: 0 },\n        resolution: { value: new THREE.Vector4() },\n      },\n      // wireframe: true,\n      transparent: true,\n      vertexShader: vertex,\n      fragmentShader: fragment,\n    });\n\n    const material = new THREE.MeshBasicMaterial({\n      map: new THREE.TextureLoader().load(map),\n    });\n\n    const geometry = new THREE.SphereBufferGeometry(1, 30, 30);\n\n    const planet = new THREE.Mesh(geometry, material);\n    masterScene.add(planet);\n  };\n\n  const addObjects = () => {\n    addPlanel();\n  };\n\n  const resize = () => {\n    scene_width = container.offsetWidth;\n    scene_height = this.container.offsetHeight;\n    renderer.setSize(scene_width, scene_height);\n    camera.aspect = scene_width / scene_height;\n    camera.updateProjectionMatrix();\n  };\n\n  const render = () => {};\n\n  const setupResize = () => {\n    window.addEventListener(\"resize\", resize.bind(this));\n  };\n\n  addObjects();\n  // this.resize();\n  // this.render();\n  // this.setupResize();\n\n  return <>Map</>;\n}\n\nexport default Globe;\n"]},"metadata":{},"sourceType":"module"}