{"ast":null,"code":"var _jsxFileName = \"/Users/drewstephenson/Documents/3DPortIntel/src/Globe.js\";\nimport React, { Component } from \"react\"; // import './styles/App.scss';\n\nimport * as THREE from \"three\";\nimport * as _ from \"lodash\"; // import Moment from 'react-moment';\n\nimport moment from \"moment\"; // import map from \"./earth-dark.jpg\";\n\nimport map from \"./earthmap1k.jpg\"; // import gsap from \"gsap\";\n\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { DragControls } from \"three/examples/jsm/controls/DragControls\";\nimport { shuffle, isWinningCombination } from \"./helper/helper\";\nimport { rubik_colors, color_opt_array } from \"./cubes/colors\";\nimport { getDraggableIntersectionsOfSelectedSq, getAvailableSqByDirection } from \"./helper/intersects\";\nimport portdata from \"./Drew.json\"; // import { generateGameboardCubes, generateMasterCubes } from './cubes/gameboard';\n// import { generateMasterCubeDisplay } from './controls/controls';\n\nimport lFragment from \"./utils/shader/line_fragment.glsl\";\nimport lVertex from \"./utils/shader/line_vertex.glsl\"; // // import vertex from \"./shader/vertex.glsl”;\n\nimport { BsChevronDown, BsChevronLeft, BsChevronRight, BsChevronUp } from \"react-icons/bs\";\nimport { FiMenu } from \"react-icons/fi\"; // debuger\n// const gui = new dat.GUI({ closed: true });\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst globeRadius = 1; // global\n\nlet camera, dragControls, scene, renderer, appEl;\nlet controls;\nlet cubes = [];\nlet globeGroup;\nlet materialShader; // let setInervalTimer;\n\nlet masterGameMap = new Map();\nconst boardGameMap = new Map();\nconst game_map_row1 = new Map();\nconst game_map_row2 = new Map();\nconst game_map_row3 = new Map();\nconst boardGameMap_row1 = new Map();\nconst boardGameMap_row2 = new Map();\nconst boardGameMap_row3 = new Map();\nmasterGameMap.set(0, game_map_row1);\nmasterGameMap.set(1, game_map_row2);\nmasterGameMap.set(2, game_map_row3);\nboardGameMap.set(0, boardGameMap_row1);\nboardGameMap.set(1, boardGameMap_row2);\nboardGameMap.set(2, boardGameMap_row3);\n\nclass Globe extends Component {\n  constructor() {\n    super();\n\n    this.bindKeyPress = () => {\n      window.addEventListener(\"keydown\", e => {\n        e.preventDefault();\n        let isAnimating = false;\n\n        if (!this.debouncedFn) {\n          this.debouncedFn = _.debounce(key => {\n            switch (key) {\n              case \"ArrowLeft\":\n                // left\n                break;\n\n              case \"ArrowUp\":\n                // up\n                break;\n\n              case \"ArrowRight\":\n                // right\n                break;\n\n              case \"ArrowDown\":\n                // down\n                break;\n\n              default:\n                return;\n              // exit this handler\n            }\n          }, 100);\n        }\n\n        if (!isAnimating) {\n          isAnimating = true;\n          this.debouncedFn(e.key);\n        }\n      });\n    };\n\n    this.bindResize = () => {\n      window.addEventListener(\"resize\", e => {\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n      });\n    };\n\n    this.generateGridHelper = () => {\n      var standardPlaneNormal = new THREE.Vector3(0, 0, 1);\n      var GridHelperPlaneNormal = new THREE.Vector3(0, 1, 0);\n      var GridHelperPlaneMaster = new THREE.Vector3(0, 1, 0);\n      var quaternion = new THREE.Quaternion();\n      quaternion.setFromUnitVectors(standardPlaneNormal, GridHelperPlaneNormal);\n      var masterQuaternion = new THREE.Quaternion();\n      masterQuaternion.setFromUnitVectors(standardPlaneNormal, GridHelperPlaneMaster);\n      var largeGridGuide = new THREE.GridHelper(10, 10);\n      largeGridGuide.rotation.setFromQuaternion(quaternion);\n      scene.add(largeGridGuide);\n    };\n\n    this.animation = _time => {\n      if (this.materialShader) {\n        this.materialShader.uniforms.time = _time;\n      }\n\n      cubes.forEach(o => {\n        o.userData.update(o);\n      });\n      controls.update();\n      renderer.render(scene, camera);\n    };\n\n    this.calcPosFromLatLonRadN = (lat, lon, radius) => {\n      const phi = lat * (Math.PI / 180);\n      const theta = -lon * (Math.PI / 180);\n      var x = radius * Math.cos(phi) * Math.cos(theta);\n      var y = radius * Math.cos(phi) * Math.sin(theta);\n      var z = radius * Math.sin(phi);\n      return {\n        x,\n        y,\n        z\n      };\n    };\n\n    this.vertexShader = () => {\n      return `\n          varying vec3 vUv; \n      \n          void main() {\n            vUv = position; \n      \n            vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);\n            gl_Position = projectionMatrix * modelViewPosition; \n          }\n        `;\n    };\n\n    this.fragShader = () => {\n      return `\n        uniform vec3 colorA; \n        uniform vec3 colorB; \n        varying vec3 vUv;\n  \n        void main() {\n                float dash = sin(vUv.x*50)\n                if(dash<0) discard;\n        gl_FragColor = vec4(vUv.y, 0, 0, 1.0);\n        }\n    `;\n    };\n\n    this.init = () => {\n      globeGroup = new THREE.Group();\n      camera = new THREE.PerspectiveCamera(90, window.innerWidth / window.innerHeight, 0.01, 100);\n      camera.position.z = 2;\n      scene = new THREE.Scene();\n      renderer = new THREE.WebGLRenderer({\n        antialias: true,\n        alpha: true\n      });\n      renderer.setClearColor(0x000000, 0); // the default\n\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      renderer.setPixelRatio(Math.min(window.devicePixelRatio, 1));\n      renderer.setAnimationLoop(this.animation);\n      controls = new OrbitControls(camera, appEl);\n      controls.enableDamping = true;\n      let uniforms = {\n        time: {\n          value: 0\n        },\n        side: THREE.DoubleSide,\n        colorB: {\n          type: \"vec3\",\n          value: new THREE.Color(0xacb6e5)\n        },\n        colorA: {\n          type: \"vec3\",\n          value: new THREE.Color(0x74ebd5)\n        }\n      };\n      materialShader = new THREE.ShaderMaterial({\n        extensions: {\n          derivatives: \"#extension GL_OES_standard_derivatives : enable\"\n        },\n        side: THREE.DoubleSide,\n        uniforms: uniforms,\n        fragmentShader: this.fragShader(),\n        vertexShader: this.vertexShader()\n      }); // materialShader = new THREE.ShaderMaterial({\n      //   extensions: {\n      //     derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n      //   },\n      //   side: THREE.DoubleSide,\n      //   uniforms: {\n      //     time: { value: 0 },\n      //     resolution: { value: new THREE.Vector4() },\n      //     colorB: {type: 'vec3', value: new THREE.Color(0xACB6E5)},\n      //     colorA: {type: 'vec3', value: new THREE.Color(0x74ebd5)}\n      //   },\n      //   wireframe: true,\n      //   transparent: true,\n      //   vertexShader: this.vertexShader(),\n      //   fragmentShader: this.fragShader(),\n      // });\n      // setup Map\n\n      const axesHelper = new THREE.AxesHelper(5);\n      scene.add(axesHelper);\n      const globeGeo = new THREE.SphereBufferGeometry(globeRadius); //     uniform mat4 projectionMatrix;\n      //         uniform mat4 viewMatrix;\n      //         uniform mat4 modelMatrix;\n      // attribute vec3 position;\n      //     attribute vec2 vUv;\n      //     uniform smapler2D globeTexture;\n      //     precision mediump float;\n\n      const material = new THREE.ShaderMaterial({\n        extensions: {\n          derivatives: \"#extension GL_OES_standard_derivatives : enable\"\n        },\n        vertexShader: `\n        varying vec2 vUv;\n\n        void main()\n        {\n                vUv = uv;\n                gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\n        }`,\n        fragmentShader: `\n        precision mediump float;\n\n        uniform sampler2D globeTexture;\n\n        varying vec2 vUv;\n\n        void main() {\n            gl_FragColor = texture2D(globeTexture, vUv)\n        }`,\n        uniforms: {\n          globalTexture: {\n            value: new THREE.TextureLoader().load(\"./earth-dark.jpg\")\n          }\n        }\n      }); //     material.uniforms.globalTexture.value = new THREE.TextureLoader().load(map);\n      //     uniforms: {\n      //         globalTexture: {\n      //           value: new THREE.TextureLoader().load(map),\n      //         },\n      //       },\n      //  vUv = uv;\n      //       uniform mat4 projectionMatrix;\n      //           uniform mat4 viewMatrix;\n      //           uniform mat4 modelMatrix;\n      //           attribute vec3 position;\n      //       precision mediump float;\n      //       ./earth-dark.jpg\n      //     const material = new THREE.MeshBasicMaterial({\n      //       map: new THREE.TextureLoader().load(map),\n      //     });\n\n      const globe = new THREE.Mesh(globeGeo, material); //     const atl = [33.749, -84];\n      //     const chi = [41.8781, -87.6298];\n      //     const atlv = this.calcPosFromLatLonRadN(atl[0], atl[1], globeRadius);\n      //     let atlMesh = new THREE.Mesh(\n      //       new THREE.SphereBufferGeometry(0.03, 20, 20),\n      //       new THREE.MeshBasicMaterial({ color: 0xad1001 })\n      //     );\n      //     atlMesh.position.set(atlv.x, atlv.z, atlv.y);\n      //     globeGroup.add(atlMesh);\n      //     const chiV = this.calcPosFromLatLonRadN(chi[0], chi[1], globeRadius);\n      //     let chiMesh = new THREE.Mesh(\n      //       new THREE.SphereBufferGeometry(0.03, 20, 20),\n      //       new THREE.MeshBasicMaterial({ color: 0xf04e37 })\n      //     );\n      //     chiMesh.position.set(chiV.x, chiV.z, chiV.y);\n      //     globeGroup.add(chiMesh);\n\n      globeGroup.add(globe); // Atl\n\n      let point1 = {\n        lat: 33.749,\n        lng: -84\n      }; // Chi\n\n      let point2 = {\n        lat: 41.8781,\n        lng: -87.6298\n      }; // LA\n\n      let point3 = {\n        lat: 34.0522,\n        lng: -118.2437\n      }; //\n\n      let point4 = {\n        lat: 35.6762,\n        lng: 139.6503\n      };\n      let flight = [point1, point2, point3, point4];\n      console.log(\"portdata ==> \", portdata);\n      const colorArray = [\"#15bece\", \"#bbbd21\", \"#7f7f7f\", \"#e377c2\", \"#8c554a\", \"#9466bd\", \"#d62827\", \"#2da02b\", \"#ff7f0f\", \"#000000\"];\n      let count = 0;\n\n      for (const port of portdata) {\n        //     const port = portdata[i];\n        //       console.log(\"port _ \", port);\n        const paths = JSON.parse(port.path); //       console.log(\"paths ==> \", paths);\n\n        for (const path of paths) {\n          var color = new THREE.Color(colorArray[count]); // \"FFA6A6\" won't work!\n\n          color.getHex(); // 0xFFA6A6\n\n          let mesh = new THREE.Mesh(new THREE.SphereBufferGeometry(0.001, 20, 20), new THREE.MeshBasicMaterial({\n            color\n          }) // this.material\n          );\n          let pos = this.calcPosFromLatLonRadN(path.LAT, path.LON, globeRadius);\n          mesh.position.set(pos.x, pos.z, pos.y);\n          scene.add(mesh);\n        } //         let pos = this.calcPosFromLatLonRadN(\n        //         flight[i].lat,\n        //         flight[i].lng,\n        //         globeRadius\n        //       );\n        //       let mesh = new THREE.Mesh(\n        //         new THREE.SphereBufferGeometry(0.01, 20, 20),\n        //         new THREE.MeshBasicMaterial({ color: 0xff0000 })\n        //         // this.material\n        //       );\n        //       mesh.position.set(pos.x, pos.z, pos.y);\n        //       scene.add(mesh);\n        //       if (i < flight.length - 1) {\n        //         let pos1 = this.calcPosFromLatLonRadN(\n        //           flight[i + 1].lat,\n        //           flight[i + 1].lng,\n        //           globeRadius\n        //         );\n        //         this.getCurve(pos, pos1);\n        //       }\n\n\n        count++;\n      }\n\n      scene.add(globeGroup);\n      appEl.appendChild(renderer.domElement);\n    };\n\n    this.state = {\n      startTime: 0,\n      clock: 0,\n      masterCubeArr: []\n    };\n  }\n\n  componentDidMount() {\n    appEl = document.getElementsByClassName(\"webgl\")[0];\n    this.init();\n    this.bindResize();\n    this.bindKeyPress();\n  }\n\n  getCurve(p1, p2) {\n    let v1 = new THREE.Vector3(p1.x, p1.z, p1.y);\n    let v2 = new THREE.Vector3(p2.x, p2.z, p2.y);\n    let points = [];\n\n    for (let i = 0; i <= 10; i++) {\n      let p = new THREE.Vector3().lerpVectors(v1, v2, i / 10); //       console.log(\"getCurve ==> \", p);\n\n      p.normalize(); //       p.multiplyScalar(1 + 0.41 * Math.sin((Math.PI * i) / 10));\n      // p.multiplyScalar(1 + 0.1 * Math.sin((Math.PI * i) / 10));\n\n      points.push(p);\n    }\n\n    let path = new THREE.CatmullRomCurve3(points, false);\n    const geometry = new THREE.TubeGeometry(path, 72, 0.005, 8, false);\n    let uniforms = {\n      time: {\n        value: 0\n      },\n      side: THREE.DoubleSide,\n      colorB: {\n        type: \"vec3\",\n        value: new THREE.Color(0xacb6e5)\n      },\n      colorA: {\n        type: \"vec3\",\n        value: new THREE.Color(0x74ebd5)\n      }\n    }; //     const material = new THREE.ShaderMaterial({\n    //       extensions: {\n    //         derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n    //       },\n    //       side: THREE.DoubleSide,\n    //       uniforms: uniforms,\n    //       fragmentShader: fragment,\n    //       vertexShader: this.vertexShader(),\n    //     });\n\n    const material = new THREE.RawShaderMaterial({\n      vertexShader: `\n        uniform mat4 projectionMatrix;\n        uniform mat4 viewMatrix;\n        uniform mat4 modelMatrix;\n        \n        attribute vec3 position;\n        attribute vec2 vUv;\n            \n        void main()\n        {\n            gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\n        }`,\n      fragmentShader: `\n        precision mediump float;\n\n        uniform smapler2D globeTexture;\n\n        void main() {\n                gl_FragColor = vec4(0.0, 0.0, 1.0, 1.0);\n        }`\n    });\n    const mesh = new THREE.Mesh(geometry, material);\n    globeGroup.add(mesh);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"webgl\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport default Globe;","map":{"version":3,"sources":["/Users/drewstephenson/Documents/3DPortIntel/src/Globe.js"],"names":["React","Component","THREE","_","moment","map","OrbitControls","DragControls","shuffle","isWinningCombination","rubik_colors","color_opt_array","getDraggableIntersectionsOfSelectedSq","getAvailableSqByDirection","portdata","lFragment","lVertex","BsChevronDown","BsChevronLeft","BsChevronRight","BsChevronUp","FiMenu","globeRadius","camera","dragControls","scene","renderer","appEl","controls","cubes","globeGroup","materialShader","masterGameMap","Map","boardGameMap","game_map_row1","game_map_row2","game_map_row3","boardGameMap_row1","boardGameMap_row2","boardGameMap_row3","set","Globe","constructor","bindKeyPress","window","addEventListener","e","preventDefault","isAnimating","debouncedFn","debounce","key","bindResize","aspect","innerWidth","innerHeight","updateProjectionMatrix","setSize","generateGridHelper","standardPlaneNormal","Vector3","GridHelperPlaneNormal","GridHelperPlaneMaster","quaternion","Quaternion","setFromUnitVectors","masterQuaternion","largeGridGuide","GridHelper","rotation","setFromQuaternion","add","animation","_time","uniforms","time","forEach","o","userData","update","render","calcPosFromLatLonRadN","lat","lon","radius","phi","Math","PI","theta","x","cos","y","sin","z","vertexShader","fragShader","init","Group","PerspectiveCamera","position","Scene","WebGLRenderer","antialias","alpha","setClearColor","setPixelRatio","min","devicePixelRatio","setAnimationLoop","enableDamping","value","side","DoubleSide","colorB","type","Color","colorA","ShaderMaterial","extensions","derivatives","fragmentShader","axesHelper","AxesHelper","globeGeo","SphereBufferGeometry","material","globalTexture","TextureLoader","load","globe","Mesh","point1","lng","point2","point3","point4","flight","console","log","colorArray","count","port","paths","JSON","parse","path","color","getHex","mesh","MeshBasicMaterial","pos","LAT","LON","appendChild","domElement","state","startTime","clock","masterCubeArr","componentDidMount","document","getElementsByClassName","getCurve","p1","p2","v1","v2","points","i","p","lerpVectors","normalize","push","CatmullRomCurve3","geometry","TubeGeometry","RawShaderMaterial"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n// import './styles/App.scss';\nimport * as THREE from \"three\";\nimport * as _ from \"lodash\";\n// import Moment from 'react-moment';\nimport moment from \"moment\";\n// import map from \"./earth-dark.jpg\";\nimport map from \"./earthmap1k.jpg\";\n\n// import gsap from \"gsap\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { DragControls } from \"three/examples/jsm/controls/DragControls\";\nimport { shuffle, isWinningCombination } from \"./helper/helper\";\nimport { rubik_colors, color_opt_array } from \"./cubes/colors\";\nimport {\n  getDraggableIntersectionsOfSelectedSq,\n  getAvailableSqByDirection,\n} from \"./helper/intersects\";\nimport portdata from \"./Drew.json\";\n\n// import { generateGameboardCubes, generateMasterCubes } from './cubes/gameboard';\n// import { generateMasterCubeDisplay } from './controls/controls';\n\nimport lFragment from \"./utils/shader/line_fragment.glsl\";\nimport lVertex from \"./utils/shader/line_vertex.glsl\";\n\n// // import vertex from \"./shader/vertex.glsl”;\nimport {\n  BsChevronDown,\n  BsChevronLeft,\n  BsChevronRight,\n  BsChevronUp,\n} from \"react-icons/bs\";\nimport { FiMenu } from \"react-icons/fi\";\n\n// debuger\n// const gui = new dat.GUI({ closed: true });\n\nconst globeRadius = 1;\n// global\nlet camera, dragControls, scene, renderer, appEl;\nlet controls;\nlet cubes = [];\nlet globeGroup;\nlet materialShader;\n// let setInervalTimer;\n\nlet masterGameMap = new Map();\nconst boardGameMap = new Map();\n\nconst game_map_row1 = new Map();\nconst game_map_row2 = new Map();\nconst game_map_row3 = new Map();\n\nconst boardGameMap_row1 = new Map();\nconst boardGameMap_row2 = new Map();\nconst boardGameMap_row3 = new Map();\n\nmasterGameMap.set(0, game_map_row1);\nmasterGameMap.set(1, game_map_row2);\nmasterGameMap.set(2, game_map_row3);\n\nboardGameMap.set(0, boardGameMap_row1);\nboardGameMap.set(1, boardGameMap_row2);\nboardGameMap.set(2, boardGameMap_row3);\n\nclass Globe extends Component {\n  constructor() {\n    super();\n    this.state = {\n      startTime: 0,\n      clock: 0,\n      masterCubeArr: [],\n    };\n  }\n\n  componentDidMount() {\n    appEl = document.getElementsByClassName(\"webgl\")[0];\n    this.init();\n    this.bindResize();\n    this.bindKeyPress();\n  }\n\n  bindKeyPress = () => {\n    window.addEventListener(\"keydown\", (e) => {\n      e.preventDefault();\n\n      let isAnimating = false;\n\n      if (!this.debouncedFn) {\n        this.debouncedFn = _.debounce((key) => {\n          switch (key) {\n            case \"ArrowLeft\": // left\n              break;\n\n            case \"ArrowUp\": // up\n              break;\n\n            case \"ArrowRight\": // right\n              break;\n\n            case \"ArrowDown\": // down\n              break;\n            default:\n              return; // exit this handler\n          }\n        }, 100);\n      }\n\n      if (!isAnimating) {\n        isAnimating = true;\n        this.debouncedFn(e.key);\n      }\n    });\n  };\n\n  bindResize = () => {\n    window.addEventListener(\"resize\", (e) => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    });\n  };\n\n  generateGridHelper = () => {\n    var standardPlaneNormal = new THREE.Vector3(0, 0, 1);\n    var GridHelperPlaneNormal = new THREE.Vector3(0, 1, 0);\n    var GridHelperPlaneMaster = new THREE.Vector3(0, 1, 0);\n\n    var quaternion = new THREE.Quaternion();\n    quaternion.setFromUnitVectors(standardPlaneNormal, GridHelperPlaneNormal);\n\n    var masterQuaternion = new THREE.Quaternion();\n    masterQuaternion.setFromUnitVectors(\n      standardPlaneNormal,\n      GridHelperPlaneMaster\n    );\n\n    var largeGridGuide = new THREE.GridHelper(10, 10);\n    largeGridGuide.rotation.setFromQuaternion(quaternion);\n\n    scene.add(largeGridGuide);\n  };\n\n  animation = (_time) => {\n    if (this.materialShader) {\n      this.materialShader.uniforms.time = _time;\n    }\n\n    cubes.forEach((o) => {\n      o.userData.update(o);\n    });\n\n    controls.update();\n    renderer.render(scene, camera);\n  };\n\n  calcPosFromLatLonRadN = (lat, lon, radius) => {\n    const phi = lat * (Math.PI / 180);\n    const theta = -lon * (Math.PI / 180);\n\n    var x = radius * Math.cos(phi) * Math.cos(theta);\n    var y = radius * Math.cos(phi) * Math.sin(theta);\n    var z = radius * Math.sin(phi);\n    return { x, y, z };\n  };\n\n  vertexShader = () => {\n    return `\n          varying vec3 vUv; \n      \n          void main() {\n            vUv = position; \n      \n            vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);\n            gl_Position = projectionMatrix * modelViewPosition; \n          }\n        `;\n  };\n\n  //   gl_FragColor =  vec4(vUv.y, 0, 0, 1.0)\n  fragShader = () => {\n    return `\n        uniform vec3 colorA; \n        uniform vec3 colorB; \n        varying vec3 vUv;\n  \n        void main() {\n                float dash = sin(vUv.x*50)\n                if(dash<0) discard;\n        gl_FragColor = vec4(vUv.y, 0, 0, 1.0);\n        }\n    `;\n  };\n\n  init = () => {\n    globeGroup = new THREE.Group();\n    camera = new THREE.PerspectiveCamera(\n      90,\n      window.innerWidth / window.innerHeight,\n      0.01,\n      100\n    );\n    camera.position.z = 2;\n    scene = new THREE.Scene();\n\n    renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n    renderer.setClearColor(0x000000, 0); // the default\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 1));\n    renderer.setAnimationLoop(this.animation);\n\n    controls = new OrbitControls(camera, appEl);\n    controls.enableDamping = true;\n\n    let uniforms = {\n      time: { value: 0 },\n      side: THREE.DoubleSide,\n      colorB: { type: \"vec3\", value: new THREE.Color(0xacb6e5) },\n      colorA: { type: \"vec3\", value: new THREE.Color(0x74ebd5) },\n    };\n\n    materialShader = new THREE.ShaderMaterial({\n      extensions: {\n        derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n      },\n      side: THREE.DoubleSide,\n      uniforms: uniforms,\n      fragmentShader: this.fragShader(),\n      vertexShader: this.vertexShader(),\n    });\n\n    // materialShader = new THREE.ShaderMaterial({\n    //   extensions: {\n    //     derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n    //   },\n    //   side: THREE.DoubleSide,\n    //   uniforms: {\n    //     time: { value: 0 },\n    //     resolution: { value: new THREE.Vector4() },\n    //     colorB: {type: 'vec3', value: new THREE.Color(0xACB6E5)},\n    //     colorA: {type: 'vec3', value: new THREE.Color(0x74ebd5)}\n    //   },\n    //   wireframe: true,\n    //   transparent: true,\n    //   vertexShader: this.vertexShader(),\n    //   fragmentShader: this.fragShader(),\n    // });\n\n    // setup Map\n\n    const axesHelper = new THREE.AxesHelper(5);\n    scene.add(axesHelper);\n\n    const globeGeo = new THREE.SphereBufferGeometry(globeRadius);\n\n//     uniform mat4 projectionMatrix;\n//         uniform mat4 viewMatrix;\n//         uniform mat4 modelMatrix;\n// attribute vec3 position;\n    //     attribute vec2 vUv;\n    //     uniform smapler2D globeTexture;\n\n//     precision mediump float;\n\n    const material = new THREE.ShaderMaterial({\n      extensions: {\n        derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n      },\n      vertexShader: `\n        varying vec2 vUv;\n\n        void main()\n        {\n                vUv = uv;\n                gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\n        }`,\n      fragmentShader: `\n        precision mediump float;\n\n        uniform sampler2D globeTexture;\n\n        varying vec2 vUv;\n\n        void main() {\n            gl_FragColor = texture2D(globeTexture, vUv)\n        }`,\n      uniforms: {\n        globalTexture: {\n          value: new THREE.TextureLoader().load(\"./earth-dark.jpg\"),\n        },\n      },\n    });\n\n//     material.uniforms.globalTexture.value = new THREE.TextureLoader().load(map);\n\n//     uniforms: {\n//         globalTexture: {\n//           value: new THREE.TextureLoader().load(map),\n//         },\n//       },\n\n\n    //  vUv = uv;\n    //       uniform mat4 projectionMatrix;\n    //           uniform mat4 viewMatrix;\n    //           uniform mat4 modelMatrix;\n\n    //           attribute vec3 position;\n\n    //       precision mediump float;\n\n    //       ./earth-dark.jpg\n    //     const material = new THREE.MeshBasicMaterial({\n    //       map: new THREE.TextureLoader().load(map),\n    //     });\n\n    const globe = new THREE.Mesh(globeGeo, material);\n\n    //     const atl = [33.749, -84];\n    //     const chi = [41.8781, -87.6298];\n\n    //     const atlv = this.calcPosFromLatLonRadN(atl[0], atl[1], globeRadius);\n    //     let atlMesh = new THREE.Mesh(\n    //       new THREE.SphereBufferGeometry(0.03, 20, 20),\n    //       new THREE.MeshBasicMaterial({ color: 0xad1001 })\n    //     );\n    //     atlMesh.position.set(atlv.x, atlv.z, atlv.y);\n    //     globeGroup.add(atlMesh);\n\n    //     const chiV = this.calcPosFromLatLonRadN(chi[0], chi[1], globeRadius);\n    //     let chiMesh = new THREE.Mesh(\n    //       new THREE.SphereBufferGeometry(0.03, 20, 20),\n    //       new THREE.MeshBasicMaterial({ color: 0xf04e37 })\n    //     );\n    //     chiMesh.position.set(chiV.x, chiV.z, chiV.y);\n    //     globeGroup.add(chiMesh);\n    globeGroup.add(globe);\n\n    // Atl\n    let point1 = {\n      lat: 33.749,\n      lng: -84,\n    };\n\n    // Chi\n    let point2 = {\n      lat: 41.8781,\n      lng: -87.6298,\n    };\n\n    // LA\n    let point3 = {\n      lat: 34.0522,\n      lng: -118.2437,\n    };\n\n    //\n    let point4 = {\n      lat: 35.6762,\n      lng: 139.6503,\n    };\n\n    let flight = [point1, point2, point3, point4];\n\n    console.log(\"portdata ==> \", portdata);\n\n    const colorArray = [\n      \"#15bece\",\n      \"#bbbd21\",\n      \"#7f7f7f\",\n      \"#e377c2\",\n      \"#8c554a\",\n      \"#9466bd\",\n      \"#d62827\",\n      \"#2da02b\",\n      \"#ff7f0f\",\n      \"#000000\",\n    ];\n    let count = 0;\n\n    for (const port of portdata) {\n      //     const port = portdata[i];\n//       console.log(\"port _ \", port);\n\n      const paths = JSON.parse(port.path);\n      //       console.log(\"paths ==> \", paths);\n\n      for (const path of paths) {\n        var color = new THREE.Color(colorArray[count]); // \"FFA6A6\" won't work!\n        color.getHex(); // 0xFFA6A6\n\n        let mesh = new THREE.Mesh(\n          new THREE.SphereBufferGeometry(0.001, 20, 20),\n          new THREE.MeshBasicMaterial({ color })\n          // this.material\n        );\n        let pos = this.calcPosFromLatLonRadN(path.LAT, path.LON, globeRadius);\n        mesh.position.set(pos.x, pos.z, pos.y);\n        scene.add(mesh);\n      }\n      //         let pos = this.calcPosFromLatLonRadN(\n      //         flight[i].lat,\n      //         flight[i].lng,\n      //         globeRadius\n      //       );\n\n      //       let mesh = new THREE.Mesh(\n      //         new THREE.SphereBufferGeometry(0.01, 20, 20),\n      //         new THREE.MeshBasicMaterial({ color: 0xff0000 })\n      //         // this.material\n      //       );\n      //       mesh.position.set(pos.x, pos.z, pos.y);\n      //       scene.add(mesh);\n\n      //       if (i < flight.length - 1) {\n      //         let pos1 = this.calcPosFromLatLonRadN(\n      //           flight[i + 1].lat,\n      //           flight[i + 1].lng,\n      //           globeRadius\n      //         );\n      //         this.getCurve(pos, pos1);\n      //       }\n      count++;\n    }\n\n    scene.add(globeGroup);\n    appEl.appendChild(renderer.domElement);\n  };\n\n  getCurve(p1, p2) {\n    let v1 = new THREE.Vector3(p1.x, p1.z, p1.y);\n    let v2 = new THREE.Vector3(p2.x, p2.z, p2.y);\n    let points = [];\n\n    for (let i = 0; i <= 10; i++) {\n      let p = new THREE.Vector3().lerpVectors(v1, v2, i / 10);\n      //       console.log(\"getCurve ==> \", p);\n      p.normalize();\n      //       p.multiplyScalar(1 + 0.41 * Math.sin((Math.PI * i) / 10));\n      // p.multiplyScalar(1 + 0.1 * Math.sin((Math.PI * i) / 10));\n      points.push(p);\n    }\n    let path = new THREE.CatmullRomCurve3(points, false);\n\n    const geometry = new THREE.TubeGeometry(path, 72, 0.005, 8, false);\n\n    let uniforms = {\n      time: { value: 0 },\n      side: THREE.DoubleSide,\n      colorB: { type: \"vec3\", value: new THREE.Color(0xacb6e5) },\n      colorA: { type: \"vec3\", value: new THREE.Color(0x74ebd5) },\n    };\n\n    //     const material = new THREE.ShaderMaterial({\n    //       extensions: {\n    //         derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n    //       },\n    //       side: THREE.DoubleSide,\n    //       uniforms: uniforms,\n    //       fragmentShader: fragment,\n    //       vertexShader: this.vertexShader(),\n    //     });\n\n    const material = new THREE.RawShaderMaterial({\n      vertexShader: `\n        uniform mat4 projectionMatrix;\n        uniform mat4 viewMatrix;\n        uniform mat4 modelMatrix;\n        \n        attribute vec3 position;\n        attribute vec2 vUv;\n            \n        void main()\n        {\n            gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\n        }`,\n      fragmentShader: `\n        precision mediump float;\n\n        uniform smapler2D globeTexture;\n\n        void main() {\n                gl_FragColor = vec4(0.0, 0.0, 1.0, 1.0);\n        }`,\n    });\n\n    const mesh = new THREE.Mesh(geometry, material);\n    globeGroup.add(mesh);\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"webgl\"></div>\n      </>\n    );\n  }\n}\n\nexport default Globe;\n"]},"metadata":{},"sourceType":"module"}