{"ast":null,"code":"const isObjEq = (m1, m2) => {\n  if (!m1 || !m2) return false;\n\n  for (var [key, value] of m1) {\n    if (value !== m2.get(key)) return false;\n  }\n\n  return true;\n}; // Fisher-Yates (aka Knuth) Shuffle\n\n\nconst shuffle = array => {\n  var currentIndex = array.length,\n      randomIndex;\n\n  while (0 !== currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--; // And swap it with the current element.\n\n    [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n  }\n\n  return array;\n};\n\nconst isWinningCombination = (game, key) => {\n  return isObjEq(game.get(0), key.get(2)) && isObjEq(game.get(1), key.get(1)) && isObjEq(game.get(2), key.get(0));\n};\n\nmodule.exports.shuffle = shuffle;\nmodule.exports.isWinningCombination = isWinningCombination;","map":{"version":3,"sources":["/Users/drewstephenson/Documents/3DPortIntel/src/helper/helper.js"],"names":["isObjEq","m1","m2","key","value","get","shuffle","array","currentIndex","length","randomIndex","Math","floor","random","isWinningCombination","game","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAG,CAACC,EAAD,EAAKC,EAAL,KAAY;AACxB,MAAI,CAACD,EAAD,IAAO,CAACC,EAAZ,EAAgB,OAAO,KAAP;;AAChB,OAAK,IAAI,CAACC,GAAD,EAAMC,KAAN,CAAT,IAAyBH,EAAzB,EAA6B;AAAE,QAAIG,KAAK,KAAKF,EAAE,CAACG,GAAH,CAAOF,GAAP,CAAd,EAA2B,OAAO,KAAP;AAAe;;AACzE,SAAO,IAAP;AACD,CAJH,C,CAME;;;AACA,MAAMG,OAAO,GAAIC,KAAD,IAAW;AACzB,MAAIC,YAAY,GAAGD,KAAK,CAACE,MAAzB;AAAA,MAAiCC,WAAjC;;AAEA,SAAO,MAAMF,YAAb,EAA2B;AACzBE,IAAAA,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,YAA3B,CAAd;AACAA,IAAAA,YAAY,GAFa,CAIzB;;AACA,KAACD,KAAK,CAACC,YAAD,CAAN,EAAsBD,KAAK,CAACG,WAAD,CAA3B,IAA4C,CAC1CH,KAAK,CAACG,WAAD,CADqC,EACtBH,KAAK,CAACC,YAAD,CADiB,CAA5C;AAED;;AAED,SAAOD,KAAP;AACD,CAbD;;AAeA,MAAMO,oBAAoB,GAAG,CAACC,IAAD,EAAOZ,GAAP,KAAe;AAC1C,SAAOH,OAAO,CAACe,IAAI,CAACV,GAAL,CAAS,CAAT,CAAD,EAAcF,GAAG,CAACE,GAAJ,CAAQ,CAAR,CAAd,CAAP,IAAoCL,OAAO,CAACe,IAAI,CAACV,GAAL,CAAS,CAAT,CAAD,EAAcF,GAAG,CAACE,GAAJ,CAAQ,CAAR,CAAd,CAA3C,IAAwEL,OAAO,CAACe,IAAI,CAACV,GAAL,CAAS,CAAT,CAAD,EAAcF,GAAG,CAACE,GAAJ,CAAQ,CAAR,CAAd,CAAtF;AACD,CAFD;;AAIAW,MAAM,CAACC,OAAP,CAAeX,OAAf,GAAyBA,OAAzB;AACAU,MAAM,CAACC,OAAP,CAAeH,oBAAf,GAAsCA,oBAAtC","sourcesContent":["const isObjEq = (m1, m2) => {\n    if (!m1 || !m2) return false;\n    for (var [key, value] of m1) { if (value !== m2.get(key)) return false; }\n    return true;\n  }\n  \n  // Fisher-Yates (aka Knuth) Shuffle\n  const shuffle = (array) => {\n    var currentIndex = array.length, randomIndex;\n  \n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n  \n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n  \n    return array;\n  }\n  \n  const isWinningCombination = (game, key) => {\n    return isObjEq(game.get(0), key.get(2)) && isObjEq(game.get(1), key.get(1)) && isObjEq(game.get(2), key.get(0));\n  }\n  \n  module.exports.shuffle = shuffle;\n  module.exports.isWinningCombination = isWinningCombination;"]},"metadata":{},"sourceType":"module"}