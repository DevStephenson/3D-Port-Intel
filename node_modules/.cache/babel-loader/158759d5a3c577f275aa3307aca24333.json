{"ast":null,"code":"import React from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\"; // import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\n// import fragment from \"./shader/fragment.glsl\";\n// import vertex from \"./shader/vertex.glsl”;\n//\n\nimport * as dat from \"dat.gui\";\nimport gsap from \"gsap\";\nimport map from \"./earth-dark.jpg\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet scene;\nlet container;\nlet scene_width;\nlet scene_height;\nlet renderer;\nlet controls;\nlet camera;\nlet isPlaying;\nlet time; // export default class Sketch extends React.Component {\n\nfunction Globe() {\n  scene = new THREE.Scene();\n  container = document.getElementById(\"globe\");\n  scene_width = container.offsetWidth;\n  scene_height = container.offsetHeight;\n  renderer = new THREE.WebGLRenderer();\n  renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n  renderer.setSize(scene_width, scene_height);\n  renderer.setClearColor(0xeeeeee, 1);\n  container.appendChild(renderer.domElement);\n  camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.001, 1000);\n  camera.position.set(0, 0, 2);\n  controls = new OrbitControls(camera, renderer.domElement);\n  time = 0;\n  isPlaying = true;\n  addObjects(); // this.resize();\n  // this.render();\n  // this.setupResize();\n\n  const addObjects = () => {};\n\n  const resize = () => {\n    scene_width = container.offsetWidth;\n    scene_height = this.container.offsetHeight;\n    renderer.setSize(scene_width, scene_height);\n    camera.aspect = scene_width / scene_height;\n    camera.updateProjectionMatrix();\n  };\n\n  const render = () => {};\n\n  const setupResize = () => {\n    window.addEventListener(\"resize\", resize.bind(this));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: \"Map\"\n  }, void 0, false);\n}\n\n_c = Globe;\nexport default Globe;\n\nvar _c;\n\n$RefreshReg$(_c, \"Globe\");","map":{"version":3,"sources":["/Users/drewstephenson/Documents/3DPortIntel/src/Globe.js"],"names":["React","THREE","OrbitControls","dat","gsap","map","scene","container","scene_width","scene_height","renderer","controls","camera","isPlaying","time","Globe","Scene","document","getElementById","offsetWidth","offsetHeight","WebGLRenderer","setPixelRatio","Math","min","window","devicePixelRatio","setSize","setClearColor","appendChild","domElement","PerspectiveCamera","innerWidth","innerHeight","position","set","addObjects","resize","aspect","updateProjectionMatrix","render","setupResize","addEventListener","bind"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,QAA8B,8CAA9B,C,CACA;AAEA;AACA;AAEA;;AAEA,OAAO,KAAKC,GAAZ,MAAqB,SAArB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,OAAOC,GAAP,MAAgB,kBAAhB;;;AAEA,IAAIC,KAAJ;AACA,IAAIC,SAAJ;AACA,IAAIC,WAAJ;AACA,IAAIC,YAAJ;AACA,IAAIC,QAAJ;AACA,IAAIC,QAAJ;AACA,IAAIC,MAAJ;AACA,IAAIC,SAAJ;AACA,IAAIC,IAAJ,C,CAEA;;AACA,SAASC,KAAT,GAAiB;AACfT,EAAAA,KAAK,GAAG,IAAIL,KAAK,CAACe,KAAV,EAAR;AACAT,EAAAA,SAAS,GAAGU,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAZ;AACAV,EAAAA,WAAW,GAAGD,SAAS,CAACY,WAAxB;AACAV,EAAAA,YAAY,GAAGF,SAAS,CAACa,YAAzB;AACAV,EAAAA,QAAQ,GAAG,IAAIT,KAAK,CAACoB,aAAV,EAAX;AACAX,EAAAA,QAAQ,CAACY,aAAT,CAAuBC,IAAI,CAACC,GAAL,CAASC,MAAM,CAACC,gBAAhB,EAAkC,CAAlC,CAAvB;AACAhB,EAAAA,QAAQ,CAACiB,OAAT,CAAiBnB,WAAjB,EAA8BC,YAA9B;AACAC,EAAAA,QAAQ,CAACkB,aAAT,CAAuB,QAAvB,EAAiC,CAAjC;AACArB,EAAAA,SAAS,CAACsB,WAAV,CAAsBnB,QAAQ,CAACoB,UAA/B;AAEAlB,EAAAA,MAAM,GAAG,IAAIX,KAAK,CAAC8B,iBAAV,CACP,EADO,EAEPN,MAAM,CAACO,UAAP,GAAoBP,MAAM,CAACQ,WAFpB,EAGP,KAHO,EAIP,IAJO,CAAT;AAMArB,EAAAA,MAAM,CAACsB,QAAP,CAAgBC,GAAhB,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B;AACAxB,EAAAA,QAAQ,GAAG,IAAIT,aAAJ,CAAkBU,MAAlB,EAA0BF,QAAQ,CAACoB,UAAnC,CAAX;AACAhB,EAAAA,IAAI,GAAG,CAAP;AACAD,EAAAA,SAAS,GAAG,IAAZ;AAEAuB,EAAAA,UAAU,GAtBK,CAuBf;AACA;AACA;;AAEA,QAAMA,UAAU,GAAG,MAAM,CAAE,CAA3B;;AAEA,QAAMC,MAAM,GAAG,MAAM;AACnB7B,IAAAA,WAAW,GAAGD,SAAS,CAACY,WAAxB;AACAV,IAAAA,YAAY,GAAG,KAAKF,SAAL,CAAea,YAA9B;AACAV,IAAAA,QAAQ,CAACiB,OAAT,CAAiBnB,WAAjB,EAA8BC,YAA9B;AACAG,IAAAA,MAAM,CAAC0B,MAAP,GAAgB9B,WAAW,GAAGC,YAA9B;AACAG,IAAAA,MAAM,CAAC2B,sBAAP;AACD,GAND;;AAQA,QAAMC,MAAM,GAAG,MAAM,CAAE,CAAvB;;AAEA,QAAMC,WAAW,GAAG,MAAM;AACxBhB,IAAAA,MAAM,CAACiB,gBAAP,CAAwB,QAAxB,EAAkCL,MAAM,CAACM,IAAP,CAAY,IAAZ,CAAlC;AACD,GAFD;;AAGA,sBAAO;AAAA;AAAA,mBAAP;AACD;;KA3CQ5B,K;AA6CT,eAAeA,KAAf","sourcesContent":["import React from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\n// import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\n\n// import fragment from \"./shader/fragment.glsl\";\n// import vertex from \"./shader/vertex.glsl”;\n\n//\n\nimport * as dat from \"dat.gui\";\nimport gsap from \"gsap\";\n\nimport map from \"./earth-dark.jpg\";\n\nlet scene;\nlet container;\nlet scene_width;\nlet scene_height;\nlet renderer;\nlet controls;\nlet camera;\nlet isPlaying;\nlet time;\n\n// export default class Sketch extends React.Component {\nfunction Globe() {\n  scene = new THREE.Scene();\n  container = document.getElementById(\"globe\");\n  scene_width = container.offsetWidth;\n  scene_height = container.offsetHeight;\n  renderer = new THREE.WebGLRenderer();\n  renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n  renderer.setSize(scene_width, scene_height);\n  renderer.setClearColor(0xeeeeee, 1);\n  container.appendChild(renderer.domElement);\n\n  camera = new THREE.PerspectiveCamera(\n    70,\n    window.innerWidth / window.innerHeight,\n    0.001,\n    1000\n  );\n  camera.position.set(0, 0, 2);\n  controls = new OrbitControls(camera, renderer.domElement);\n  time = 0;\n  isPlaying = true;\n\n  addObjects();\n  // this.resize();\n  // this.render();\n  // this.setupResize();\n\n  const addObjects = () => {};\n\n  const resize = () => {\n    scene_width = container.offsetWidth;\n    scene_height = this.container.offsetHeight;\n    renderer.setSize(scene_width, scene_height);\n    camera.aspect = scene_width / scene_height;\n    camera.updateProjectionMatrix();\n  };\n\n  const render = () => {};\n\n  const setupResize = () => {\n    window.addEventListener(\"resize\", resize.bind(this));\n  };\n  return <>Map</>;\n}\n\nexport default Globe;\n"]},"metadata":{},"sourceType":"module"}