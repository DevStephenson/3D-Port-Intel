{"ast":null,"code":"var _jsxFileName = \"/Users/drewstephenson/Documents/3DPortIntel/src/Globe.js\";\nimport React, { Component } from \"react\"; // import './styles/App.scss';\n\nimport * as THREE from \"three\";\nimport * as _ from \"lodash\"; // import Moment from 'react-moment';\n\nimport moment from \"moment\"; // import map from \"./earth-dark.jpg\";\n\nimport map from \"./earthmap1k.jpg\"; // import gsap from \"gsap\";\n\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { DragControls } from \"three/examples/jsm/controls/DragControls\";\nimport { shuffle, isWinningCombination } from \"./helper/helper\";\nimport { rubik_colors, color_opt_array } from \"./cubes/colors\";\nimport { getDraggableIntersectionsOfSelectedSq, getAvailableSqByDirection } from \"./helper/intersects\"; // import { generateGameboardCubes, generateMasterCubes } from './cubes/gameboard';\n// import { generateMasterCubeDisplay } from './controls/controls';\n\nimport lFragment from \"./utils/shader/line_fragment.glsl\";\nimport lVertex from \"./utils/shader/line_vertex.glsl\"; // // import vertex from \"./shader/vertex.glsl”;\n\nimport { BsChevronDown, BsChevronLeft, BsChevronRight, BsChevronUp } from \"react-icons/bs\";\nimport { FiMenu } from \"react-icons/fi\"; // debuger\n// const gui = new dat.GUI({ closed: true });\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst globeRadius = 1; // global\n\nlet camera, dragControls, scene, renderer, appEl;\nlet controls;\nlet cubes = [];\nlet globeGroup;\nlet materialShader; // let setInervalTimer;\n\nlet masterGameMap = new Map();\nconst boardGameMap = new Map();\nconst game_map_row1 = new Map();\nconst game_map_row2 = new Map();\nconst game_map_row3 = new Map();\nconst boardGameMap_row1 = new Map();\nconst boardGameMap_row2 = new Map();\nconst boardGameMap_row3 = new Map();\nmasterGameMap.set(0, game_map_row1);\nmasterGameMap.set(1, game_map_row2);\nmasterGameMap.set(2, game_map_row3);\nboardGameMap.set(0, boardGameMap_row1);\nboardGameMap.set(1, boardGameMap_row2);\nboardGameMap.set(2, boardGameMap_row3);\n\nclass Globe extends Component {\n  constructor() {\n    super();\n\n    this.bindKeyPress = () => {\n      window.addEventListener(\"keydown\", e => {\n        e.preventDefault();\n        let isAnimating = false;\n\n        if (!this.debouncedFn) {\n          this.debouncedFn = _.debounce(key => {\n            switch (key) {\n              case \"ArrowLeft\":\n                // left\n                break;\n\n              case \"ArrowUp\":\n                // up\n                break;\n\n              case \"ArrowRight\":\n                // right\n                break;\n\n              case \"ArrowDown\":\n                // down\n                break;\n\n              default:\n                return;\n              // exit this handler\n            }\n          }, 100);\n        }\n\n        if (!isAnimating) {\n          isAnimating = true;\n          this.debouncedFn(e.key);\n        }\n      });\n    };\n\n    this.bindResize = () => {\n      window.addEventListener(\"resize\", e => {\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n      });\n    };\n\n    this.generateGridHelper = () => {\n      var standardPlaneNormal = new THREE.Vector3(0, 0, 1);\n      var GridHelperPlaneNormal = new THREE.Vector3(0, 1, 0);\n      var GridHelperPlaneMaster = new THREE.Vector3(0, 1, 0);\n      var quaternion = new THREE.Quaternion();\n      quaternion.setFromUnitVectors(standardPlaneNormal, GridHelperPlaneNormal);\n      var masterQuaternion = new THREE.Quaternion();\n      masterQuaternion.setFromUnitVectors(standardPlaneNormal, GridHelperPlaneMaster);\n      var largeGridGuide = new THREE.GridHelper(10, 10);\n      largeGridGuide.rotation.setFromQuaternion(quaternion);\n      scene.add(largeGridGuide);\n    };\n\n    this.animation = _time => {\n      if (this.materialShader) {\n        this.materialShader.uniforms.time = _time;\n      }\n\n      cubes.forEach(o => {\n        o.userData.update(o);\n      });\n      controls.update();\n      renderer.render(scene, camera);\n    };\n\n    this.calcPosFromLatLonRadN = (lat, lon, radius) => {\n      const phi = lat * (Math.PI / 180);\n      const theta = -lon * (Math.PI / 180);\n      var x = radius * Math.cos(phi) * Math.cos(theta);\n      var y = radius * Math.cos(phi) * Math.sin(theta);\n      var z = radius * Math.sin(phi);\n      return {\n        x,\n        y,\n        z\n      };\n    };\n\n    this.vertexShader = () => {\n      return `\n          varying vec3 vUv; \n      \n          void main() {\n            vUv = position; \n      \n            vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);\n            gl_Position = projectionMatrix * modelViewPosition; \n          }\n        `;\n    };\n\n    this.fragShader = () => {\n      return `\n        uniform vec3 colorA; \n        uniform vec3 colorB; \n        varying vec3 vUv;\n  \n        void main() {\n                float dash = sin(vUv.x*50)\n                if(dash<0) discard;\n        gl_FragColor = vec4(vUv.y, 0, 0, 1.0);\n        }\n    `;\n    };\n\n    this.init = () => {\n      globeGroup = new THREE.Group();\n      camera = new THREE.PerspectiveCamera(90, window.innerWidth / window.innerHeight, .01, 100);\n      camera.position.z = 4;\n      scene = new THREE.Scene();\n      renderer = new THREE.WebGLRenderer({\n        antialias: true,\n        alpha: true\n      });\n      renderer.setClearColor(0x000000, 0); // the default\n\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      renderer.setPixelRatio(Math.min(window.devicePixelRatio, 1));\n      renderer.setAnimationLoop(this.animation);\n      controls = new OrbitControls(camera, appEl);\n      controls.enableDamping = true;\n      let uniforms = {\n        time: {\n          value: 0\n        },\n        side: THREE.DoubleSide,\n        colorB: {\n          type: \"vec3\",\n          value: new THREE.Color(0xacb6e5)\n        },\n        colorA: {\n          type: \"vec3\",\n          value: new THREE.Color(0x74ebd5)\n        }\n      };\n      materialShader = new THREE.ShaderMaterial({\n        extensions: {\n          derivatives: \"#extension GL_OES_standard_derivatives : enable\"\n        },\n        side: THREE.DoubleSide,\n        uniforms: uniforms,\n        fragmentShader: this.fragShader(),\n        vertexShader: this.vertexShader()\n      }); // materialShader = new THREE.ShaderMaterial({\n      //   extensions: {\n      //     derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n      //   },\n      //   side: THREE.DoubleSide,\n      //   uniforms: {\n      //     time: { value: 0 },\n      //     resolution: { value: new THREE.Vector4() },\n      //     colorB: {type: 'vec3', value: new THREE.Color(0xACB6E5)},\n      //     colorA: {type: 'vec3', value: new THREE.Color(0x74ebd5)}\n      //   },\n      //   wireframe: true,\n      //   transparent: true,\n      //   vertexShader: this.vertexShader(),\n      //   fragmentShader: this.fragShader(),\n      // });\n      // setup Map\n\n      const axesHelper = new THREE.AxesHelper(5);\n      scene.add(axesHelper);\n      const globeGeo = new THREE.SphereBufferGeometry(globeRadius);\n      const material = new THREE.MeshBasicMaterial({\n        map: new THREE.TextureLoader().load(map)\n      });\n      const globe = new THREE.Mesh(globeGeo, material); //     const atl = [33.749, -84];\n      //     const chi = [41.8781, -87.6298];\n      //     const atlv = this.calcPosFromLatLonRadN(atl[0], atl[1], globeRadius);\n      //     let atlMesh = new THREE.Mesh(\n      //       new THREE.SphereBufferGeometry(0.03, 20, 20),\n      //       new THREE.MeshBasicMaterial({ color: 0xad1001 })\n      //     );\n      //     atlMesh.position.set(atlv.x, atlv.z, atlv.y);\n      //     globeGroup.add(atlMesh);\n      //     const chiV = this.calcPosFromLatLonRadN(chi[0], chi[1], globeRadius);\n      //     let chiMesh = new THREE.Mesh(\n      //       new THREE.SphereBufferGeometry(0.03, 20, 20),\n      //       new THREE.MeshBasicMaterial({ color: 0xf04e37 })\n      //     );\n      //     chiMesh.position.set(chiV.x, chiV.z, chiV.y);\n      //     globeGroup.add(chiMesh);\n\n      globeGroup.add(globe); // Atl\n\n      let point1 = {\n        lat: 33.749,\n        lng: -84\n      }; // Chi\n\n      let point2 = {\n        lat: 41.8781,\n        lng: -87.6298\n      }; // LA\n\n      let point3 = {\n        lat: 34.0522,\n        lng: -118.2437\n      }; //\n\n      let point4 = {\n        lat: 35.6762,\n        lng: 139.6503\n      };\n      let flight = [point1, point2, point3, point4];\n\n      for (var i = 0; i < flight.length; i++) {\n        let pos = this.calcPosFromLatLonRadN(flight[i].lat, flight[i].lng, globeRadius);\n        let mesh = new THREE.Mesh(new THREE.SphereBufferGeometry(0.01, 20, 20), new THREE.MeshBasicMaterial({\n          color: 0xff0000\n        }) // this.material\n        );\n        mesh.position.set(pos.x, pos.z, pos.y);\n        scene.add(mesh);\n\n        if (i < flight.length - 1) {\n          let pos1 = this.calcPosFromLatLonRadN(flight[i + 1].lat, flight[i + 1].lng, globeRadius);\n          this.getCurve(pos, pos1);\n        }\n      }\n\n      scene.add(globeGroup);\n      appEl.appendChild(renderer.domElement);\n    };\n\n    this.state = {\n      startTime: 0,\n      clock: 0,\n      masterCubeArr: []\n    };\n  }\n\n  componentDidMount() {\n    appEl = document.getElementsByClassName(\"webgl\")[0];\n    this.init();\n    this.bindResize();\n    this.bindKeyPress();\n  }\n\n  getCurve(p1, p2) {\n    let v1 = new THREE.Vector3(p1.x, p1.z, p1.y);\n    let v2 = new THREE.Vector3(p2.x, p2.z, p2.y);\n    let points = [];\n\n    for (let i = 0; i <= 10; i++) {\n      let p = new THREE.Vector3().lerpVectors(v1, v2, i / 10); //       console.log(\"getCurve ==> \", p);\n\n      p.normalize(); //       p.multiplyScalar(1 + 0.41 * Math.sin((Math.PI * i) / 10));\n\n      p.multiplyScalar(1 + 0.1 * Math.sin(Math.PI * i / 10));\n      points.push(p);\n    }\n\n    let path = new THREE.CatmullRomCurve3(points, false);\n    const geometry = new THREE.TubeGeometry(path, 72, 0.005, 8, false);\n    let uniforms = {\n      time: {\n        value: 0\n      },\n      side: THREE.DoubleSide,\n      colorB: {\n        type: \"vec3\",\n        value: new THREE.Color(0xacb6e5)\n      },\n      colorA: {\n        type: \"vec3\",\n        value: new THREE.Color(0x74ebd5)\n      }\n    }; //     const material = new THREE.ShaderMaterial({\n    //       extensions: {\n    //         derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n    //       },\n    //       side: THREE.DoubleSide,\n    //       uniforms: uniforms,\n    //       fragmentShader: fragment,\n    //       vertexShader: this.vertexShader(),\n    //     });\n\n    const material = new THREE.RawShaderMaterial({\n      vertexShader: `\n        uniform mat4 projectionMatrix;\n        uniform mat4 viewMatrix;\n        uniform mat4 modelMatrix;\n            \n        attribute vec3 position;\n            \n        void main()\n        {\n            gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\n        }`,\n      fragmentShader: `\n        precision mediump float;\n        void main() {\n                gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n        }`\n    });\n    const mesh = new THREE.Mesh(geometry, material);\n    globeGroup.add(mesh);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"webgl\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport default Globe;","map":{"version":3,"sources":["/Users/drewstephenson/Documents/3DPortIntel/src/Globe.js"],"names":["React","Component","THREE","_","moment","map","OrbitControls","DragControls","shuffle","isWinningCombination","rubik_colors","color_opt_array","getDraggableIntersectionsOfSelectedSq","getAvailableSqByDirection","lFragment","lVertex","BsChevronDown","BsChevronLeft","BsChevronRight","BsChevronUp","FiMenu","globeRadius","camera","dragControls","scene","renderer","appEl","controls","cubes","globeGroup","materialShader","masterGameMap","Map","boardGameMap","game_map_row1","game_map_row2","game_map_row3","boardGameMap_row1","boardGameMap_row2","boardGameMap_row3","set","Globe","constructor","bindKeyPress","window","addEventListener","e","preventDefault","isAnimating","debouncedFn","debounce","key","bindResize","aspect","innerWidth","innerHeight","updateProjectionMatrix","setSize","generateGridHelper","standardPlaneNormal","Vector3","GridHelperPlaneNormal","GridHelperPlaneMaster","quaternion","Quaternion","setFromUnitVectors","masterQuaternion","largeGridGuide","GridHelper","rotation","setFromQuaternion","add","animation","_time","uniforms","time","forEach","o","userData","update","render","calcPosFromLatLonRadN","lat","lon","radius","phi","Math","PI","theta","x","cos","y","sin","z","vertexShader","fragShader","init","Group","PerspectiveCamera","position","Scene","WebGLRenderer","antialias","alpha","setClearColor","setPixelRatio","min","devicePixelRatio","setAnimationLoop","enableDamping","value","side","DoubleSide","colorB","type","Color","colorA","ShaderMaterial","extensions","derivatives","fragmentShader","axesHelper","AxesHelper","globeGeo","SphereBufferGeometry","material","MeshBasicMaterial","TextureLoader","load","globe","Mesh","point1","lng","point2","point3","point4","flight","i","length","pos","mesh","color","pos1","getCurve","appendChild","domElement","state","startTime","clock","masterCubeArr","componentDidMount","document","getElementsByClassName","p1","p2","v1","v2","points","p","lerpVectors","normalize","multiplyScalar","push","path","CatmullRomCurve3","geometry","TubeGeometry","RawShaderMaterial"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n// import './styles/App.scss';\nimport * as THREE from \"three\";\nimport * as _ from \"lodash\";\n// import Moment from 'react-moment';\nimport moment from \"moment\";\n// import map from \"./earth-dark.jpg\";\nimport map from \"./earthmap1k.jpg\";\n\n// import gsap from \"gsap\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { DragControls } from \"three/examples/jsm/controls/DragControls\";\nimport { shuffle, isWinningCombination } from \"./helper/helper\";\nimport { rubik_colors, color_opt_array } from \"./cubes/colors\";\nimport {\n  getDraggableIntersectionsOfSelectedSq,\n  getAvailableSqByDirection,\n} from \"./helper/intersects\";\n// import { generateGameboardCubes, generateMasterCubes } from './cubes/gameboard';\n// import { generateMasterCubeDisplay } from './controls/controls';\n\nimport lFragment from \"./utils/shader/line_fragment.glsl\";\nimport lVertex from \"./utils/shader/line_vertex.glsl\";\n\n// // import vertex from \"./shader/vertex.glsl”;\nimport {\n  BsChevronDown,\n  BsChevronLeft,\n  BsChevronRight,\n  BsChevronUp,\n} from \"react-icons/bs\";\nimport { FiMenu } from \"react-icons/fi\";\n\n// debuger\n// const gui = new dat.GUI({ closed: true });\n\nconst globeRadius = 1;\n// global\nlet camera, dragControls, scene, renderer, appEl;\nlet controls;\nlet cubes = [];\nlet globeGroup;\nlet materialShader;\n// let setInervalTimer;\n\nlet masterGameMap = new Map();\nconst boardGameMap = new Map();\n\nconst game_map_row1 = new Map();\nconst game_map_row2 = new Map();\nconst game_map_row3 = new Map();\n\nconst boardGameMap_row1 = new Map();\nconst boardGameMap_row2 = new Map();\nconst boardGameMap_row3 = new Map();\n\nmasterGameMap.set(0, game_map_row1);\nmasterGameMap.set(1, game_map_row2);\nmasterGameMap.set(2, game_map_row3);\n\nboardGameMap.set(0, boardGameMap_row1);\nboardGameMap.set(1, boardGameMap_row2);\nboardGameMap.set(2, boardGameMap_row3);\n\nclass Globe extends Component {\n  constructor() {\n    super();\n    this.state = {\n      startTime: 0,\n      clock: 0,\n      masterCubeArr: [],\n    };\n  }\n\n  componentDidMount() {\n    appEl = document.getElementsByClassName(\"webgl\")[0];\n    this.init();\n    this.bindResize();\n    this.bindKeyPress();\n  }\n\n  bindKeyPress = () => {\n    window.addEventListener(\"keydown\", (e) => {\n      e.preventDefault();\n\n      let isAnimating = false;\n\n      if (!this.debouncedFn) {\n        this.debouncedFn = _.debounce((key) => {\n          switch (key) {\n            case \"ArrowLeft\": // left\n              break;\n\n            case \"ArrowUp\": // up\n              break;\n\n            case \"ArrowRight\": // right\n              break;\n\n            case \"ArrowDown\": // down\n              break;\n            default:\n              return; // exit this handler\n          }\n        }, 100);\n      }\n\n      if (!isAnimating) {\n        isAnimating = true;\n        this.debouncedFn(e.key);\n      }\n    });\n  };\n\n  bindResize = () => {\n    window.addEventListener(\"resize\", (e) => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    });\n  };\n\n  generateGridHelper = () => {\n    var standardPlaneNormal = new THREE.Vector3(0, 0, 1);\n    var GridHelperPlaneNormal = new THREE.Vector3(0, 1, 0);\n    var GridHelperPlaneMaster = new THREE.Vector3(0, 1, 0);\n\n    var quaternion = new THREE.Quaternion();\n    quaternion.setFromUnitVectors(standardPlaneNormal, GridHelperPlaneNormal);\n\n    var masterQuaternion = new THREE.Quaternion();\n    masterQuaternion.setFromUnitVectors(\n      standardPlaneNormal,\n      GridHelperPlaneMaster\n    );\n\n    var largeGridGuide = new THREE.GridHelper(10, 10);\n    largeGridGuide.rotation.setFromQuaternion(quaternion);\n\n    scene.add(largeGridGuide);\n  };\n\n  animation = (_time) => {\n    if (this.materialShader) {\n      this.materialShader.uniforms.time = _time;\n    }\n\n    cubes.forEach((o) => {\n      o.userData.update(o);\n    });\n\n    controls.update();\n    renderer.render(scene, camera);\n  };\n\n  calcPosFromLatLonRadN = (lat, lon, radius) => {\n    const phi = lat * (Math.PI / 180);\n    const theta = -lon * (Math.PI / 180);\n\n    var x = radius * Math.cos(phi) * Math.cos(theta);\n    var y = radius * Math.cos(phi) * Math.sin(theta);\n    var z = radius * Math.sin(phi);\n    return { x, y, z };\n  };\n\n  vertexShader = () => {\n    return `\n          varying vec3 vUv; \n      \n          void main() {\n            vUv = position; \n      \n            vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);\n            gl_Position = projectionMatrix * modelViewPosition; \n          }\n        `;\n  };\n\n  //   gl_FragColor =  vec4(vUv.y, 0, 0, 1.0)\n  fragShader = () => {\n    return `\n        uniform vec3 colorA; \n        uniform vec3 colorB; \n        varying vec3 vUv;\n  \n        void main() {\n                float dash = sin(vUv.x*50)\n                if(dash<0) discard;\n        gl_FragColor = vec4(vUv.y, 0, 0, 1.0);\n        }\n    `;\n  };\n\n  init = () => {\n    globeGroup = new THREE.Group();\n    camera = new THREE.PerspectiveCamera(\n      90,\n      window.innerWidth / window.innerHeight,\n      .01,\n      100\n    );\n    camera.position.z = 4;\n    scene = new THREE.Scene();\n\n    renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n    renderer.setClearColor(0x000000, 0); // the default\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 1));\n    renderer.setAnimationLoop(this.animation);\n\n    controls = new OrbitControls(camera, appEl);\n    controls.enableDamping = true;\n\n    let uniforms = {\n      time: { value: 0 },\n      side: THREE.DoubleSide,\n      colorB: { type: \"vec3\", value: new THREE.Color(0xacb6e5) },\n      colorA: { type: \"vec3\", value: new THREE.Color(0x74ebd5) },\n    };\n\n    materialShader = new THREE.ShaderMaterial({\n      extensions: {\n        derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n      },\n      side: THREE.DoubleSide,\n      uniforms: uniforms,\n      fragmentShader: this.fragShader(),\n      vertexShader: this.vertexShader(),\n    });\n\n    // materialShader = new THREE.ShaderMaterial({\n    //   extensions: {\n    //     derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n    //   },\n    //   side: THREE.DoubleSide,\n    //   uniforms: {\n    //     time: { value: 0 },\n    //     resolution: { value: new THREE.Vector4() },\n    //     colorB: {type: 'vec3', value: new THREE.Color(0xACB6E5)},\n    //     colorA: {type: 'vec3', value: new THREE.Color(0x74ebd5)}\n    //   },\n    //   wireframe: true,\n    //   transparent: true,\n    //   vertexShader: this.vertexShader(),\n    //   fragmentShader: this.fragShader(),\n    // });\n\n    // setup Map\n\n    const axesHelper = new THREE.AxesHelper(5);\n    scene.add(axesHelper);\n\n    const globeGeo = new THREE.SphereBufferGeometry(globeRadius);\n    const material = new THREE.MeshBasicMaterial({\n      map: new THREE.TextureLoader().load(map),\n    });\n\n    const globe = new THREE.Mesh(globeGeo, material);\n\n    //     const atl = [33.749, -84];\n    //     const chi = [41.8781, -87.6298];\n\n    //     const atlv = this.calcPosFromLatLonRadN(atl[0], atl[1], globeRadius);\n    //     let atlMesh = new THREE.Mesh(\n    //       new THREE.SphereBufferGeometry(0.03, 20, 20),\n    //       new THREE.MeshBasicMaterial({ color: 0xad1001 })\n    //     );\n    //     atlMesh.position.set(atlv.x, atlv.z, atlv.y);\n    //     globeGroup.add(atlMesh);\n\n    //     const chiV = this.calcPosFromLatLonRadN(chi[0], chi[1], globeRadius);\n    //     let chiMesh = new THREE.Mesh(\n    //       new THREE.SphereBufferGeometry(0.03, 20, 20),\n    //       new THREE.MeshBasicMaterial({ color: 0xf04e37 })\n    //     );\n    //     chiMesh.position.set(chiV.x, chiV.z, chiV.y);\n    //     globeGroup.add(chiMesh);\n    globeGroup.add(globe);\n\n    // Atl\n    let point1 = {\n      lat: 33.749,\n      lng: -84,\n    };\n\n    // Chi\n    let point2 = {\n      lat: 41.8781,\n      lng: -87.6298,\n    };\n\n    // LA\n    let point3 = {\n      lat: 34.0522,\n      lng: -118.2437,\n    };\n\n    //\n    let point4 = {\n      lat: 35.6762,\n      lng: 139.6503,\n    };\n\n    let flight = [point1, point2, point3, point4];\n\n    for (var i = 0; i < flight.length; i++) {\n      let pos = this.calcPosFromLatLonRadN(\n        flight[i].lat,\n        flight[i].lng,\n        globeRadius\n      );\n\n      let mesh = new THREE.Mesh(\n        new THREE.SphereBufferGeometry(0.01, 20, 20),\n        new THREE.MeshBasicMaterial({ color: 0xff0000 })\n        // this.material\n      );\n      mesh.position.set(pos.x, pos.z, pos.y);\n      scene.add(mesh);\n\n      if (i < flight.length - 1) {\n        let pos1 = this.calcPosFromLatLonRadN(\n          flight[i + 1].lat,\n          flight[i + 1].lng,\n          globeRadius\n        );\n        this.getCurve(pos, pos1);\n      }\n    }\n    scene.add(globeGroup);\n    appEl.appendChild(renderer.domElement);\n  };\n\n  getCurve(p1, p2) {\n    let v1 = new THREE.Vector3(p1.x, p1.z, p1.y);\n    let v2 = new THREE.Vector3(p2.x, p2.z, p2.y);\n    let points = [];\n\n    for (let i = 0; i <= 10; i++) {\n      let p = new THREE.Vector3().lerpVectors(v1, v2, i / 10);\n      //       console.log(\"getCurve ==> \", p);\n      p.normalize()\n//       p.multiplyScalar(1 + 0.41 * Math.sin((Math.PI * i) / 10));\np.multiplyScalar(1 + 0.1 * Math.sin((Math.PI * i) / 10));\n      points.push(p);\n    }\n    let path = new THREE.CatmullRomCurve3(points, false);\n\n    const geometry = new THREE.TubeGeometry(path, 72, 0.005, 8, false);\n\n    let uniforms = {\n      time: { value: 0 },\n      side: THREE.DoubleSide,\n      colorB: { type: \"vec3\", value: new THREE.Color(0xacb6e5) },\n      colorA: { type: \"vec3\", value: new THREE.Color(0x74ebd5) },\n    };\n\n//     const material = new THREE.ShaderMaterial({\n//       extensions: {\n//         derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n//       },\n//       side: THREE.DoubleSide,\n//       uniforms: uniforms,\n//       fragmentShader: fragment,\n//       vertexShader: this.vertexShader(),\n//     });\n\n    const material = new THREE.RawShaderMaterial({\n        vertexShader:`\n        uniform mat4 projectionMatrix;\n        uniform mat4 viewMatrix;\n        uniform mat4 modelMatrix;\n            \n        attribute vec3 position;\n            \n        void main()\n        {\n            gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.0);\n        }`,\n        fragmentShader: `\n        precision mediump float;\n        void main() {\n                gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n        }`\n    })\n\n    const mesh = new THREE.Mesh(geometry, material);\n    globeGroup.add(mesh);\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"webgl\"></div>\n      </>\n    );\n  }\n}\n\nexport default Globe;\n"]},"metadata":{},"sourceType":"module"}