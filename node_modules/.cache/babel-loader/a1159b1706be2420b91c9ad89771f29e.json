{"ast":null,"code":"import React from 'react';\nimport * as THREE from \"three\";\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'; // import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\n// import fragment from \"./shader/fragment.glsl\";\n// import vertex from \"./shader/vertex.glsl”;\n//\n\nimport * as dat from \"dat.gui\";\nimport gsap from \"gsap\";\nimport map from './earth-dark.jpg'; // let scene;\n// let container;\n// let width;\n// let height;\n// let renderer;\n// let controls;\n// let camera;\n// let isPlaying;\n// let time;\n\nexport default class Sketch extends React.Component {\n  constructor(options) {\n    super();\n    this.scene = new THREE.Scene();\n    console.log('options ==> ', options.dom.offsetWidth);\n    this.container = options.dom;\n    console.log('container ==> ', this.container.offsetWidth);\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n    this.renderer.setSize(this.width, this.height);\n    this.renderer.setClearColor(0xeeeeee, 1);\n    this.container.appendChild(this.renderer.domElement);\n    this.camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.001, 1000); // var frustumSize = 10;\n    // var aspect = window.innerWidth / window.innerHeight;\n    // this.camera = new THREE.OrthographicCamera( frustumSize * aspect / - 2, frustumSize * aspect / 2, frustumSize / 2, frustumSize / - 2, -1000, 1000 );\n\n    this.camera.position.set(0, 0, 2);\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.time = 0;\n    this.isPlaying = true;\n    this.addObjects();\n    this.resize();\n    this.render();\n    this.setupResize(); // this.settings();\n  }\n\n  settings() {\n    let that = this;\n    this.settings = {\n      progress: 0\n    };\n    this.gui = new dat.GUI();\n    this.gui.add(this.settings, \"progress\", 0, 1, 0.01);\n  }\n\n  setupResize() {\n    window.addEventListener(\"resize\", this.resize.bind(this));\n  }\n\n  resize() {\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n    this.renderer.setSize(this.width, this.height);\n    this.camera.aspect = this.width / this.height;\n    this.camera.updateProjectionMatrix();\n  }\n\n  addObjects() {\n    let that = this;\n    this.materialShader = new THREE.ShaderMaterial({\n      extensions: {\n        derivatives: \"#extension GL_OES_standard_derivatives : enable\"\n      },\n      side: THREE.DoubleSide,\n      uniforms: {\n        time: {\n          value: 0\n        },\n        resolution: {\n          value: new THREE.Vector4()\n        }\n      },\n      // wireframe: true,\n      transparent: true //   vertexShader: vertex,\n      //   fragmentShader: fragment\n\n    });\n    this.material = new THREE.MeshBasicMaterial({\n      map: new THREE.TextureLoader().load(map)\n    });\n    this.geometry = new THREE.SphereBufferGeometry(1, 30, 30);\n    this.planet = new THREE.Mesh(this.geometry, this.material);\n    this.scene.add(this.planet); // add pin\n\n    let mesh = new THREE.Mesh(new THREE.SphereBufferGeometry(0.03, 20, 20), new THREE.MeshBasicMaterial({\n      color: 0xff0000\n    }));\n    let mesh1 = new THREE.Mesh(new THREE.SphereBufferGeometry(0.03, 20, 20), new THREE.MeshBasicMaterial({\n      color: 0x00ff00\n    }));\n    let mesh2 = mesh1.clone(); // @todo VITE!!\n    // let lat = 15.6677 * Math.PI/180;\n    // let lng = 96.5545 * Math.PI/180;\n    // WRONG\n\n    function convertLatLngToCartesian(p) {\n      let lat = p.lat * Math.PI / 180;\n      let lng = (180 + p.lng) * Math.PI / 180;\n      let x = Math.sin(lat) * Math.sin(lng);\n      let y = Math.sin(lat) * Math.cos(lng);\n      let z = Math.cos(lat);\n      return {\n        x,\n        y,\n        z\n      };\n    } // RIGHT!!!!\n\n\n    function calcPosFromLatLonRad(lat, lon) {\n      var phi = lat * (Math.PI / 180);\n      var theta = (lon + 180) * (Math.PI / 180);\n      let x = -(Math.cos(phi) * Math.cos(theta));\n      let z = Math.cos(phi) * Math.sin(theta);\n      let y = Math.sin(phi);\n      return {\n        x,\n        y,\n        z\n      };\n    } // let point2 = {\n    //   lat:  34.0522,\n    //   lng: -118.2437\n    // }\n    // let point2 = {\n    //   lat: -23.6345,\n    //   lng: 102.5528\n    // }\n\n\n    let point1 = {\n      lat: 50.4501,\n      lng: 30.5234\n    };\n    let point2 = {\n      lat: 25.3548,\n      lng: 51.1839\n    };\n    let point3 = {\n      lat: 41.8781,\n      lng: -87.6298\n    }; // Dallas\n\n    let point4 = {\n      lat: 32.7767,\n      lng: -96.7970\n    }; // Cancun\n\n    let point5 = {\n      lat: 21.1619,\n      lng: -86.8515\n    }; // Puerto Escondido\n\n    let point6 = {\n      lat: 15.8720,\n      lng: -97.0767\n    };\n    let flight = [point1, point2, point3, point4, point5, point6];\n\n    for (var i = 0; i < flight.length; i++) {\n      let pos = calcPosFromLatLonRad(flight[i].lat, flight[i].lng);\n      let mesh = new THREE.Mesh(new THREE.SphereBufferGeometry(0.03, 20, 20), new THREE.MeshBasicMaterial({\n        color: 0xff0000\n      }) // this.material\n      );\n      mesh.position.set(pos.x, pos.y, pos.z);\n      this.scene.add(mesh);\n\n      if (i < flight.length - 1) {\n        let pos1 = calcPosFromLatLonRad(flight[i + 1].lat, flight[i + 1].lng);\n        this.getCurve(pos, pos1);\n      }\n    }\n  }\n\n  getCurve(p1, p2) {\n    let v1 = new THREE.Vector3(p1.x, p1.y, p1.z);\n    let v2 = new THREE.Vector3(p2.x, p2.y, p2.z);\n    let points = [];\n\n    for (let i = 0; i <= 20; i++) {\n      let p = new THREE.Vector3().lerpVectors(v1, v2, i / 20);\n      p.normalize();\n      p.multiplyScalar(1 + 0.04 * Math.sin(Math.PI * i / 20));\n      points.push(p);\n    }\n\n    let path = new THREE.CatmullRomCurve3(points);\n    const geometry = new THREE.TubeGeometry(path, 20, 0.005, 8, false);\n    const material = this.materialShader;\n    const mesh = new THREE.Mesh(geometry, material);\n    this.scene.add(mesh);\n  }\n\n  stop() {\n    this.isPlaying = false;\n  }\n\n  play() {\n    if (!this.isPlaying) {\n      this.render();\n      this.isPlaying = true;\n    }\n  }\n\n  render() {\n    if (!this.isPlaying) return;\n    this.time += 0.05;\n    this.scene.rotation.y = -this.time / 30;\n    this.materialShader.uniforms.time.value = this.time;\n    requestAnimationFrame(this.render.bind(this));\n    this.renderer.render(this.scene, this.camera);\n  }\n\n}\nnew Sketch({\n  dom: document.getElementById(\"container\")\n});","map":{"version":3,"sources":["/Users/drewstephenson/Documents/3DPortIntel/src/Sketch.js"],"names":["React","THREE","OrbitControls","dat","gsap","map","Sketch","Component","constructor","options","scene","Scene","console","log","dom","offsetWidth","container","width","height","offsetHeight","renderer","WebGLRenderer","setPixelRatio","Math","min","window","devicePixelRatio","setSize","setClearColor","appendChild","domElement","camera","PerspectiveCamera","innerWidth","innerHeight","position","set","controls","time","isPlaying","addObjects","resize","render","setupResize","settings","that","progress","gui","GUI","add","addEventListener","bind","aspect","updateProjectionMatrix","materialShader","ShaderMaterial","extensions","derivatives","side","DoubleSide","uniforms","value","resolution","Vector4","transparent","material","MeshBasicMaterial","TextureLoader","load","geometry","SphereBufferGeometry","planet","Mesh","mesh","color","mesh1","mesh2","clone","convertLatLngToCartesian","p","lat","PI","lng","x","sin","y","cos","z","calcPosFromLatLonRad","lon","phi","theta","point1","point2","point3","point4","point5","point6","flight","i","length","pos","pos1","getCurve","p1","p2","v1","Vector3","v2","points","lerpVectors","normalize","multiplyScalar","push","path","CatmullRomCurve3","TubeGeometry","stop","play","rotation","requestAnimationFrame","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as THREE from \"three\";\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\n// import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\n\n// import fragment from \"./shader/fragment.glsl\";\n// import vertex from \"./shader/vertex.glsl”;\n\n//\n\nimport * as dat from \"dat.gui\";\nimport gsap from \"gsap\";\n\nimport map from './earth-dark.jpg';\n\n\n// let scene;\n// let container;\n// let width;\n// let height;\n// let renderer;\n// let controls;\n// let camera;\n// let isPlaying;\n// let time;\n\nexport default class Sketch extends React.Component {\n\n\n  constructor(options) {\n    super();\n    this.scene = new THREE.Scene();\n    console.log('options ==> ', options.dom.offsetWidth)\n    this.container = options.dom;\n\n    console.log('container ==> ', this.container.offsetWidth )\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n    this.renderer.setSize(this.width, this.height);\n    this.renderer.setClearColor(0xeeeeee, 1); \n\n    this.container.appendChild(this.renderer.domElement);\n\n    this.camera = new THREE.PerspectiveCamera(\n      70,\n      window.innerWidth / window.innerHeight,\n      0.001,\n      1000\n    );\n\n    // var frustumSize = 10;\n    // var aspect = window.innerWidth / window.innerHeight;\n    // this.camera = new THREE.OrthographicCamera( frustumSize * aspect / - 2, frustumSize * aspect / 2, frustumSize / 2, frustumSize / - 2, -1000, 1000 );\n    this.camera.position.set(0, 0, 2);\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.time = 0;\n\n    this.isPlaying = true;\n    \n    this.addObjects();\n    this.resize();\n    this.render();\n    this.setupResize();\n    // this.settings();\n  }\n\n  settings() {\n    let that = this;\n    this.settings = {\n      progress: 0,\n    };\n    this.gui = new dat.GUI();\n    this.gui.add(this.settings, \"progress\", 0, 1, 0.01);\n  }\n\n  setupResize() {\n    window.addEventListener(\"resize\", this.resize.bind(this));\n  }\n\n  resize() {\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n    this.renderer.setSize(this.width, this.height);\n    this.camera.aspect = this.width / this.height;\n    this.camera.updateProjectionMatrix();\n  }\n\n  addObjects() {\n    let that = this;\n    this.materialShader = new THREE.ShaderMaterial({\n      extensions: {\n        derivatives: \"#extension GL_OES_standard_derivatives : enable\"\n      },\n      side: THREE.DoubleSide,\n      uniforms: {\n        time: { value: 0 },\n        resolution: { value: new THREE.Vector4() },\n      },\n      // wireframe: true,\n      transparent: true,\n    //   vertexShader: vertex,\n    //   fragmentShader: fragment\n    });\n\n    this.material = new THREE.MeshBasicMaterial({\n      map: new THREE.TextureLoader().load(map)\n    })\n\n    this.geometry = new THREE.SphereBufferGeometry(1, 30,30);\n\n    this.planet = new THREE.Mesh(this.geometry, this.material);\n    this.scene.add(this.planet);\n\n    // add pin\n\n    let mesh = new THREE.Mesh(\n      new THREE.SphereBufferGeometry(0.03,20,20),\n      new THREE.MeshBasicMaterial({color:0xff0000})\n    )\n    let mesh1 = new THREE.Mesh(\n      new THREE.SphereBufferGeometry(0.03,20,20),\n      new THREE.MeshBasicMaterial({color:0x00ff00})\n    )\n\n    let mesh2 = mesh1.clone();\n\n    // @todo VITE!!\n    // let lat = 15.6677 * Math.PI/180;\n    // let lng = 96.5545 * Math.PI/180;\n\n\n    // WRONG\n    function convertLatLngToCartesian(p){\n      let lat = (p.lat) * Math.PI/180;\n      let lng = (180+p.lng) * Math.PI/180;\n      let x = Math.sin(lat)*Math.sin(lng)\n      let y = Math.sin(lat)*Math.cos(lng)\n      let z = Math.cos(lat)\n      return {\n        x,y,z\n      }\n\n    }\n\n    // RIGHT!!!!\n    function calcPosFromLatLonRad(lat,lon) {\n      var phi   = (lat)*(Math.PI/180);\n      var theta = (lon+180)*(Math.PI/180);\n      let x = -(Math.cos(phi)*Math.cos(theta));\n      let z = ( Math.cos(phi)*Math.sin(theta));\n      let y = ( Math.sin(phi));\n      return {x,y,z};\n    }\n\n    // let point2 = {\n    //   lat:  34.0522,\n    //   lng: -118.2437\n    // }\n\n    // let point2 = {\n    //   lat: -23.6345,\n    //   lng: 102.5528\n    // }\n\n    let point1 = {\n      lat: 50.4501,\n      lng: 30.5234\n    }\n\n    let point2 = {\n      lat: 25.3548,\n      lng: 51.1839,\n    }\n\n    let point3 = {\n      lat: 41.8781,\n      lng: -87.6298,\n    }\n    // Dallas\n    let point4 = {\n      lat: 32.7767,\n      lng: -96.7970,\n    }\n    // Cancun\n    let point5 = {\n      lat: 21.1619,\n      lng: -86.8515,\n    }\n\n    // Puerto Escondido\n    let point6 = {\n      lat: 15.8720,\n      lng: -97.0767,\n    }\n\n    let flight = [\n      point1,\n      point2,\n      point3,\n      point4,\n      point5,\n      point6,\n    ]\n\n\n    for (var i = 0; i < flight.length; i++) {\n      let pos = calcPosFromLatLonRad(flight[i].lat,flight[i].lng);\n      \n      let mesh = new THREE.Mesh(\n        new THREE.SphereBufferGeometry(0.03,20,20),\n        new THREE.MeshBasicMaterial({color:0xff0000})\n        // this.material\n      )\n      mesh.position.set(pos.x,pos.y,pos.z)\n      this.scene.add(mesh);\n      if(i<flight.length-1){\n        let pos1 = calcPosFromLatLonRad(flight[i+1].lat,flight[i+1].lng);\n        this.getCurve(pos,pos1)\n      }\n      \n    }\n\n\n  }\n\n\n  getCurve(p1,p2){\n    let v1 = new THREE.Vector3(p1.x,p1.y,p1.z);\n    let v2 = new THREE.Vector3(p2.x,p2.y,p2.z);\n    let points = []\n    for (let i = 0; i <=20; i++) {\n      let p = new THREE.Vector3().lerpVectors(v1,v2, i/20)\n      p.normalize()\n      p.multiplyScalar(1 + 0.04*Math.sin(Math.PI*i/20));\n      points.push(p)\n    }\n\n    let path = new THREE.CatmullRomCurve3(points);\n\n\n\n    const geometry = new THREE.TubeGeometry( path, 20, 0.005, 8, false );\n    const material = this.materialShader\n    const mesh = new THREE.Mesh( geometry, material );\n    this.scene.add( mesh );\n\n  }\n\n\n  stop() {\n    this.isPlaying = false;\n  }\n\n  play() {\n    if(!this.isPlaying){\n      this.render()\n      this.isPlaying = true;\n    }\n  }\n\n  render() {\n    if (!this.isPlaying) return;\n    this.time += 0.05;\n    this.scene.rotation.y = -this.time/30\n    this.materialShader.uniforms.time.value = this.time;\n    requestAnimationFrame(this.render.bind(this));\n    this.renderer.render(this.scene, this.camera);\n  }\n}\n\nnew Sketch({\n  dom: document.getElementById(\"container\")\n});\n"]},"metadata":{},"sourceType":"module"}