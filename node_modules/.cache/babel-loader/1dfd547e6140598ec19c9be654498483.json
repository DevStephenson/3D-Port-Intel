{"ast":null,"code":"import*as THREE from\"three\";import gsap from\"gsap\";var cubeSize=1;var getIntersects=function getIntersects(originPoint,cubes,direction){var intersectsResults=[];var raycaster=new THREE.Raycaster();var rayOrigin=new THREE.Vector3(originPoint.x,originPoint.y,0);var rayDirection;switch(direction){case\"T\":rayDirection=new THREE.Vector3(0,2,0).normalize();break;case\"R\":rayDirection=new THREE.Vector3(2,0,0).normalize();break;case\"B\":rayDirection=new THREE.Vector3(0,-2,0).normalize();break;case\"L\":rayDirection=new THREE.Vector3(-2,0,0).normalize();break;default:break;}raycaster.set(rayOrigin,rayDirection);var instersects=raycaster.intersectObjects(cubes).filter(function(mesh){return mesh.object.userData.color!==undefined;});if(instersects.length>0){var distantIntersect=false;if(instersects[0].distance>1){distantIntersect=true;}if(distantIntersect){intersectsResults.push(false);}else{intersectsResults.push(true);}}else{intersectsResults.push(false);}return intersectsResults;};var getDraggableIntersectionsOfSelectedSq=function getDraggableIntersectionsOfSelectedSq(originPoint,cubes){var rayOrigin=new THREE.Vector3(originPoint.x,originPoint.y,0);var raycasterLeft=new THREE.Raycaster();var raycasterTop=new THREE.Raycaster();var raycasterRight=new THREE.Raycaster();var raycasterBottom=new THREE.Raycaster();var rayDirectionLeft=new THREE.Vector3(-2,0,0).normalize();var rayDirectionTop=new THREE.Vector3(0,2,0).normalize();var rayDirectionRight=new THREE.Vector3(2,0,0).normalize();var rayDirectionBottom=new THREE.Vector3(0,-2,0).normalize();raycasterLeft.set(rayOrigin,rayDirectionLeft);raycasterTop.set(rayOrigin,rayDirectionTop);raycasterRight.set(rayOrigin,rayDirectionRight);raycasterBottom.set(rayOrigin,rayDirectionBottom);var instersectsLeft=raycasterLeft.intersectObjects(cubes).filter(function(mesh){return mesh.object.userData.color!==undefined;});var instersectsTop=raycasterTop.intersectObjects(cubes).filter(function(mesh){return mesh.object.userData.color!==undefined;});var instersectsRight=raycasterRight.intersectObjects(cubes).filter(function(mesh){return mesh.object.userData.color!==undefined;});var instersectsBottom=raycasterBottom.intersectObjects(cubes).filter(function(mesh){return mesh.object.userData.color!==undefined;});var intersectsResults=[];if(instersectsTop.length>0){var closeIntersections=instersectsTop.filter(function(intersect){return intersect.distance<=0.5;});if(closeIntersections.length>0){intersectsResults.push({T:originPoint.y});}else{if(instersectsTop.length>0){intersectsResults.push({T:originPoint.y+instersectsTop[0].distance-cubeSize/2});}else{//\n}}}if(instersectsRight.length>0){var _closeIntersections=instersectsRight.filter(function(intersect){return intersect.distance<=0.5;});if(_closeIntersections.length>0){intersectsResults.push({R:originPoint.x});}else{if(instersectsRight.length>0){intersectsResults.push({R:originPoint.x+instersectsRight[0].distance-cubeSize/2});}}}if(instersectsBottom.length>0){var _closeIntersections2=instersectsBottom.filter(function(intersect){return intersect.distance<=0.5;});if(_closeIntersections2.length>0){intersectsResults.push({B:originPoint.y});}else{if(instersectsBottom.length>0){intersectsResults.push({B:originPoint.y-instersectsBottom[0].distance+cubeSize/2});}}}if(instersectsLeft.length>0){var _closeIntersections3=instersectsLeft.filter(function(intersect){return intersect.distance<=0.5;});if(_closeIntersections3.length>0){intersectsResults.push({L:originPoint.x});}else{if(instersectsLeft.length>0){intersectsResults.push({L:originPoint.x-instersectsLeft[0].distance+cubeSize/2});}}}return intersectsResults;};var getAvailableSqByDirection=function getAvailableSqByDirection(cubes,direction){cubes.filter(function(cube){var originPoint=cube.position.clone();var intersects=getIntersects(originPoint,cubes,direction);var found=false;for(var i=0;i<intersects.length;i++){if(intersects[i]){found=intersects[i];break;}else{var _duration=.1;var _delay=0;var _easing='power2.out';switch(direction){case\"T\":// cube.position.y = cube.position.y + 1;\ngsap.to(cube.position,{duration:_duration,delay:_delay,y:cube.position.y+1,ease:_easing});break;case\"R\":gsap.to(cube.position,{duration:_duration,delay:_delay,x:cube.position.x+1,ease:_easing});// cube.position.x = cube.position.x + 1;\nbreak;case\"B\":// cube.position.y = cube.position.y - 1;\ngsap.to(cube.position,{duration:_duration,delay:_delay,y:cube.position.y-1,ease:_easing});break;case\"L\":// cube.position.x = cube.position.x - 1;\ngsap.to(cube.position,{duration:_duration,delay:_delay,x:cube.position.x-1,ease:_easing});break;default:break;}}}if(!found){return cube;}});};export{getDraggableIntersectionsOfSelectedSq,getAvailableSqByDirection};","map":{"version":3,"sources":["/Users/drewstephenson/Documents/3DPortIntel/src/helper/intersects.js"],"names":["THREE","gsap","cubeSize","getIntersects","originPoint","cubes","direction","intersectsResults","raycaster","Raycaster","rayOrigin","Vector3","x","y","rayDirection","normalize","set","instersects","intersectObjects","filter","mesh","object","userData","color","undefined","length","distantIntersect","distance","push","getDraggableIntersectionsOfSelectedSq","raycasterLeft","raycasterTop","raycasterRight","raycasterBottom","rayDirectionLeft","rayDirectionTop","rayDirectionRight","rayDirectionBottom","instersectsLeft","instersectsTop","instersectsRight","instersectsBottom","closeIntersections","intersect","T","R","B","L","getAvailableSqByDirection","cube","position","clone","intersects","found","i","_duration","_delay","_easing","to","duration","delay","ease"],"mappings":"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","sourcesContent":["import * as THREE from \"three\";\nimport gsap from \"gsap\";\n\nlet cubeSize = 1;\n\nconst getIntersects = (originPoint, cubes, direction) => {\n  const intersectsResults = [];\n  const raycaster = new THREE.Raycaster();\n  const rayOrigin = new THREE.Vector3(originPoint.x, originPoint.y, 0);\n  let rayDirection;\n\n  switch (direction) {\n    case \"T\":\n      rayDirection = new THREE.Vector3(0, 2, 0).normalize();\n      break;\n\n    case \"R\":\n      rayDirection = new THREE.Vector3(2, 0, 0).normalize();\n      break;\n\n    case \"B\":\n      rayDirection = new THREE.Vector3(0, -2, 0).normalize();\n      break;\n\n    case \"L\":\n      rayDirection = new THREE.Vector3(-2, 0, 0).normalize();\n      break;\n\n    default:\n      break;\n  }\n\n  raycaster.set(rayOrigin, rayDirection);\n  const instersects = raycaster.intersectObjects(cubes)\n    .filter((mesh) => mesh.object.userData.color !== undefined);\n\n\n  if (instersects.length > 0) {\n    let distantIntersect = false;\n\n    if (instersects[0].distance > 1) {\n      distantIntersect = true\n    }\n    if (distantIntersect) {\n      intersectsResults.push(false);\n    } else {\n      intersectsResults.push(true);\n    }\n  } else {\n    intersectsResults.push(false);\n  }\n\n  return intersectsResults;\n}\n\nconst getDraggableIntersectionsOfSelectedSq = (originPoint, cubes) => {\n  const rayOrigin = new THREE.Vector3(originPoint.x, originPoint.y, 0);\n\n  const raycasterLeft = new THREE.Raycaster();\n  const raycasterTop = new THREE.Raycaster();\n  const raycasterRight = new THREE.Raycaster();\n  const raycasterBottom = new THREE.Raycaster();\n\n  const rayDirectionLeft = new THREE.Vector3(-2, 0, 0).normalize();\n  const rayDirectionTop = new THREE.Vector3(0, 2, 0).normalize();\n  const rayDirectionRight = new THREE.Vector3(2, 0, 0).normalize();\n  const rayDirectionBottom = new THREE.Vector3(0, -2, 0).normalize();\n\n  raycasterLeft.set(rayOrigin, rayDirectionLeft);\n  raycasterTop.set(rayOrigin, rayDirectionTop);\n  raycasterRight.set(rayOrigin, rayDirectionRight);\n  raycasterBottom.set(rayOrigin, rayDirectionBottom);\n\n  const instersectsLeft = raycasterLeft\n    .intersectObjects(cubes)\n    .filter((mesh) => mesh.object.userData.color !== undefined);\n  const instersectsTop = raycasterTop\n    .intersectObjects(cubes)\n    .filter((mesh) => mesh.object.userData.color !== undefined);\n  const instersectsRight = raycasterRight\n    .intersectObjects(cubes)\n    .filter((mesh) => mesh.object.userData.color !== undefined);\n  const instersectsBottom = raycasterBottom\n    .intersectObjects(cubes)\n    .filter((mesh) => mesh.object.userData.color !== undefined);\n\n  let intersectsResults = [];\n\n\n  if (instersectsTop.length > 0) {\n    const closeIntersections = instersectsTop.filter(\n      (intersect) => intersect.distance <= 0.5\n    );\n\n    if (closeIntersections.length > 0) {\n      intersectsResults.push({ T: originPoint.y });\n    } else {\n      if (instersectsTop.length > 0) {\n        intersectsResults.push({\n          T: originPoint.y + instersectsTop[0].distance - cubeSize / 2,\n        });\n      } else {\n        //\n      }\n    }\n  }\n\n  if (instersectsRight.length > 0) {\n    const closeIntersections = instersectsRight.filter(\n      (intersect) => intersect.distance <= 0.5\n    );\n    if (closeIntersections.length > 0) {\n      intersectsResults.push({ R: originPoint.x });\n    } else {\n      if (instersectsRight.length > 0) {\n        intersectsResults.push({\n          R: originPoint.x + instersectsRight[0].distance - cubeSize / 2,\n        });\n      }\n    }\n  }\n\n  if (instersectsBottom.length > 0) {\n    const closeIntersections = instersectsBottom.filter(\n      (intersect) => intersect.distance <= 0.5\n    );\n\n    if (closeIntersections.length > 0) {\n      intersectsResults.push({ B: originPoint.y });\n    } else {\n      if (instersectsBottom.length > 0) {\n        intersectsResults.push({\n          B: originPoint.y - instersectsBottom[0].distance + cubeSize / 2,\n        });\n      }\n    }\n  }\n\n  if (instersectsLeft.length > 0) {\n    const closeIntersections = instersectsLeft.filter(\n      (intersect) => intersect.distance <= 0.5\n    );\n\n    if (closeIntersections.length > 0) {\n      intersectsResults.push({ L: originPoint.x });\n    } else {\n      if (instersectsLeft.length > 0) {\n        intersectsResults.push({\n          L: originPoint.x - instersectsLeft[0].distance + cubeSize / 2,\n        });\n      }\n    }\n  }\n\n  return intersectsResults;\n}\n\nconst getAvailableSqByDirection = (cubes, direction) => {\n  cubes.filter(cube => {\n    var originPoint = cube.position.clone();\n    const intersects = getIntersects(originPoint, cubes, direction);\n    var found = false;\n    \n    for (var i = 0; i < intersects.length; i++) {\n      if (intersects[i]) {\n        found = intersects[i];\n        break;\n      } else {\n\n        const _duration = .1;\n        const _delay = 0;\n        const _easing = 'power2.out';\n\n        switch (direction) {\n          case \"T\":\n            // cube.position.y = cube.position.y + 1;\n            gsap.to(cube.position, { duration: _duration, delay: _delay, y: cube.position.y + 1, ease: _easing })\n            break;\n\n          case \"R\":\n            gsap.to(cube.position, { duration: _duration, delay: _delay, x: cube.position.x + 1, ease: _easing })\n            // cube.position.x = cube.position.x + 1;\n            break;\n\n          case \"B\":\n            // cube.position.y = cube.position.y - 1;\n            gsap.to(cube.position, { duration: _duration, delay: _delay, y: cube.position.y - 1, ease: _easing })\n            break;\n\n          case \"L\":\n            // cube.position.x = cube.position.x - 1;\n            gsap.to(cube.position, { duration: _duration, delay: _delay, x: cube.position.x - 1, ease: _easing })\n            break;\n\n          default:\n            break;\n        }\n\n      }\n    }\n\n    if (!found) {\n      return cube;\n    }\n  });\n}\n\nexport { getDraggableIntersectionsOfSelectedSq, getAvailableSqByDirection };"]},"metadata":{},"sourceType":"module"}