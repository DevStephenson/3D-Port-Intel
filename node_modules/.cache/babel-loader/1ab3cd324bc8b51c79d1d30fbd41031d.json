{"ast":null,"code":"import _classCallCheck from\"/Users/drewstephenson/Documents/3DPortIntel/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/drewstephenson/Documents/3DPortIntel/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _inherits from\"/Users/drewstephenson/Documents/3DPortIntel/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/Users/drewstephenson/Documents/3DPortIntel/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import React,{Component}from\"react\";// import './styles/App.scss';\nimport*as THREE from\"three\";import*as _ from\"lodash\";// import Moment from 'react-moment';\nimport moment from\"moment\";// import map from \"./earth-dark.jpg\";\nimport map from\"./earthmap1k.jpg\";// import gsap from \"gsap\";\nimport{OrbitControls}from\"three/examples/jsm/controls/OrbitControls\";import{DragControls}from\"three/examples/jsm/controls/DragControls\";import{shuffle,isWinningCombination}from\"./helper/helper\";import{rubik_colors,color_opt_array}from\"./cubes/colors\";import{getDraggableIntersectionsOfSelectedSq,getAvailableSqByDirection}from\"./helper/intersects\";// import { generateGameboardCubes, generateMasterCubes } from './cubes/gameboard';\n// import { generateMasterCubeDisplay } from './controls/controls';\nimport lFragment from\"./utils/shader/line_fragment.glsl\";import lVertex from\"./utils/shader/line_vertex.glsl\";// // import vertex from \"./shader/vertex.glsl‚Äù;\nimport{BsChevronDown,BsChevronLeft,BsChevronRight,BsChevronUp}from\"react-icons/bs\";import{FiMenu}from\"react-icons/fi\";// debuger\n// const gui = new dat.GUI({ closed: true });\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var globeRadius=3;// global\nvar camera,dragControls,scene,renderer,appEl;var controls;var cubes=[];var globeGroup;var materialShader;// let setInervalTimer;\nvar masterGameMap=new Map();var boardGameMap=new Map();var game_map_row1=new Map();var game_map_row2=new Map();var game_map_row3=new Map();var boardGameMap_row1=new Map();var boardGameMap_row2=new Map();var boardGameMap_row3=new Map();masterGameMap.set(0,game_map_row1);masterGameMap.set(1,game_map_row2);masterGameMap.set(2,game_map_row3);boardGameMap.set(0,boardGameMap_row1);boardGameMap.set(1,boardGameMap_row2);boardGameMap.set(2,boardGameMap_row3);var Globe=/*#__PURE__*/function(_Component){_inherits(Globe,_Component);var _super=_createSuper(Globe);function Globe(){var _this;_classCallCheck(this,Globe);_this=_super.call(this);_this.bindKeyPress=function(){window.addEventListener(\"keydown\",function(e){e.preventDefault();var isAnimating=false;if(!_this.debouncedFn){_this.debouncedFn=_.debounce(function(key){switch(key){case\"ArrowLeft\":// left\nbreak;case\"ArrowUp\":// up\nbreak;case\"ArrowRight\":// right\nbreak;case\"ArrowDown\":// down\nbreak;default:return;// exit this handler\n}},100);}if(!isAnimating){isAnimating=true;_this.debouncedFn(e.key);}});};_this.bindResize=function(){window.addEventListener(\"resize\",function(e){camera.aspect=window.innerWidth/window.innerHeight;camera.updateProjectionMatrix();renderer.setSize(window.innerWidth,window.innerHeight);});};_this.generateGridHelper=function(){var standardPlaneNormal=new THREE.Vector3(0,0,1);var GridHelperPlaneNormal=new THREE.Vector3(0,1,0);var GridHelperPlaneMaster=new THREE.Vector3(0,1,0);var quaternion=new THREE.Quaternion();quaternion.setFromUnitVectors(standardPlaneNormal,GridHelperPlaneNormal);var masterQuaternion=new THREE.Quaternion();masterQuaternion.setFromUnitVectors(standardPlaneNormal,GridHelperPlaneMaster);var largeGridGuide=new THREE.GridHelper(10,10);largeGridGuide.rotation.setFromQuaternion(quaternion);scene.add(largeGridGuide);};_this.animation=function(_time){if(_this.materialShader){_this.materialShader.uniforms.time=_time;}cubes.forEach(function(o){o.userData.update(o);});controls.update();renderer.render(scene,camera);};_this.calcPosFromLatLonRadN=function(lat,lon,radius){var phi=lat*(Math.PI/180);var theta=-lon*(Math.PI/180);var x=radius*Math.cos(phi)*Math.cos(theta);var y=radius*Math.cos(phi)*Math.sin(theta);var z=radius*Math.sin(phi);return{x:x,y:y,z:z};};_this.vertexShader=function(){return\"\\n          varying vec3 vUv; \\n      \\n          void main() {\\n            vUv = position; \\n      \\n            vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);\\n            gl_Position = projectionMatrix * modelViewPosition; \\n          }\\n        \";};_this.fragShader=function(){return\"\\n        uniform vec3 colorA; \\n        uniform vec3 colorB; \\n        varying vec3 vUv;\\n  \\n        void main() {\\n                float dash = sin(vUv.x*50)\\n                if(dash<0) discard;\\n        gl_FragColor = vec4(vUv.y, 0, 0, 1.0);\\n        }\\n    \";};_this.init=function(){globeGroup=new THREE.Group();camera=new THREE.PerspectiveCamera(90,window.innerWidth/window.innerHeight,0.01,100);camera.position.z=6;scene=new THREE.Scene();renderer=new THREE.WebGLRenderer({antialias:true,alpha:true});renderer.setClearColor(0x000000,0);// the default\nrenderer.setSize(window.innerWidth,window.innerHeight);renderer.setPixelRatio(Math.min(window.devicePixelRatio,1));renderer.setAnimationLoop(_this.animation);controls=new OrbitControls(camera,appEl);controls.enableDamping=true;var uniforms={time:{value:0},side:THREE.DoubleSide,colorB:{type:\"vec3\",value:new THREE.Color(0xacb6e5)},colorA:{type:\"vec3\",value:new THREE.Color(0x74ebd5)}};materialShader=new THREE.ShaderMaterial({extensions:{derivatives:\"#extension GL_OES_standard_derivatives : enable\"},side:THREE.DoubleSide,uniforms:uniforms,fragmentShader:_this.fragShader(),vertexShader:_this.vertexShader()});// materialShader = new THREE.ShaderMaterial({\n//   extensions: {\n//     derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n//   },\n//   side: THREE.DoubleSide,\n//   uniforms: {\n//     time: { value: 0 },\n//     resolution: { value: new THREE.Vector4() },\n//     colorB: {type: 'vec3', value: new THREE.Color(0xACB6E5)},\n//     colorA: {type: 'vec3', value: new THREE.Color(0x74ebd5)}\n//   },\n//   wireframe: true,\n//   transparent: true,\n//   vertexShader: this.vertexShader(),\n//   fragmentShader: this.fragShader(),\n// });\n// setup Map\nvar axesHelper=new THREE.AxesHelper(5);scene.add(axesHelper);var globeGeo=new THREE.SphereBufferGeometry(globeRadius);var material=new THREE.MeshBasicMaterial({map:new THREE.TextureLoader().load(map)});var globe=new THREE.Mesh(globeGeo,material);//     const atl = [33.749, -84];\n//     const chi = [41.8781, -87.6298];\n//     const atlv = this.calcPosFromLatLonRadN(atl[0], atl[1], globeRadius);\n//     let atlMesh = new THREE.Mesh(\n//       new THREE.SphereBufferGeometry(0.03, 20, 20),\n//       new THREE.MeshBasicMaterial({ color: 0xad1001 })\n//     );\n//     atlMesh.position.set(atlv.x, atlv.z, atlv.y);\n//     globeGroup.add(atlMesh);\n//     const chiV = this.calcPosFromLatLonRadN(chi[0], chi[1], globeRadius);\n//     let chiMesh = new THREE.Mesh(\n//       new THREE.SphereBufferGeometry(0.03, 20, 20),\n//       new THREE.MeshBasicMaterial({ color: 0xf04e37 })\n//     );\n//     chiMesh.position.set(chiV.x, chiV.z, chiV.y);\n//     globeGroup.add(chiMesh);\nglobeGroup.add(globe);// Atl\nvar point1={lat:33.749,lng:-84};// Chi\nvar point2={lat:41.8781,lng:-87.6298};// LA\nvar point3={lat:34.0522,lng:-118.2437};//\nvar point4={lat:35.6762,lng:139.6503};var flight=[point1,point2,point3,point4];for(var i=0;i<flight.length;i++){var pos=_this.calcPosFromLatLonRadN(flight[i].lat,flight[i].lng,globeRadius);var mesh=new THREE.Mesh(new THREE.SphereBufferGeometry(0.03,20,20),new THREE.MeshBasicMaterial({color:0xff0000})// this.material\n);mesh.position.set(pos.x,pos.z,pos.y);scene.add(mesh);if(i<flight.length-1){var pos1=_this.calcPosFromLatLonRadN(flight[i+1].lat,flight[i+1].lng,globeRadius);_this.getCurve(pos,pos1);}}scene.add(globeGroup);appEl.appendChild(renderer.domElement);};_this.state={startTime:0,clock:0,masterCubeArr:[]};return _this;}_createClass(Globe,[{key:\"componentDidMount\",value:function componentDidMount(){appEl=document.getElementsByClassName(\"webgl\")[0];this.init();this.bindResize();this.bindKeyPress();}},{key:\"getCurve\",value:function getCurve(p1,p2){var v1=new THREE.Vector3(p1.x,p1.z,p1.y);var v2=new THREE.Vector3(p2.x,p2.z,p2.y);var points=[];for(var i=0;i<=20;i++){var p=new THREE.Vector3().lerpVectors(v1,v2,i/20);//       console.log(\"getCurve ==> \", p);\n//       p.normalize()\np.multiplyScalar(1+0.51*Math.sin(Math.PI*i/20));points.push(p);}var path=new THREE.CatmullRomCurve3(points,false);var geometry=new THREE.TubeGeometry(path,72,0.005,8,false);var uniforms={time:{value:0},side:THREE.DoubleSide,colorB:{type:\"vec3\",value:new THREE.Color(0xacb6e5)},colorA:{type:\"vec3\",value:new THREE.Color(0x74ebd5)}};//     const material = new THREE.ShaderMaterial({\n//       extensions: {\n//         derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n//       },\n//       side: THREE.DoubleSide,\n//       uniforms: uniforms,\n//       fragmentShader: fragment,\n//       vertexShader: this.vertexShader(),\n//     });\nvar material=new THREE.RawShaderMaterial({vertexShader:lVertex,fragmentShader:lFragment});var mesh=new THREE.Mesh(geometry,material);globeGroup.add(mesh);}},{key:\"render\",value:function render(){return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"div\",{className:\"webgl\"})});}}]);return Globe;}(Component);export default Globe;","map":{"version":3,"sources":["/Users/drewstephenson/Documents/3DPortIntel/src/Globe.js"],"names":["React","Component","THREE","_","moment","map","OrbitControls","DragControls","shuffle","isWinningCombination","rubik_colors","color_opt_array","getDraggableIntersectionsOfSelectedSq","getAvailableSqByDirection","lFragment","lVertex","BsChevronDown","BsChevronLeft","BsChevronRight","BsChevronUp","FiMenu","globeRadius","camera","dragControls","scene","renderer","appEl","controls","cubes","globeGroup","materialShader","masterGameMap","Map","boardGameMap","game_map_row1","game_map_row2","game_map_row3","boardGameMap_row1","boardGameMap_row2","boardGameMap_row3","set","Globe","bindKeyPress","window","addEventListener","e","preventDefault","isAnimating","debouncedFn","debounce","key","bindResize","aspect","innerWidth","innerHeight","updateProjectionMatrix","setSize","generateGridHelper","standardPlaneNormal","Vector3","GridHelperPlaneNormal","GridHelperPlaneMaster","quaternion","Quaternion","setFromUnitVectors","masterQuaternion","largeGridGuide","GridHelper","rotation","setFromQuaternion","add","animation","_time","uniforms","time","forEach","o","userData","update","render","calcPosFromLatLonRadN","lat","lon","radius","phi","Math","PI","theta","x","cos","y","sin","z","vertexShader","fragShader","init","Group","PerspectiveCamera","position","Scene","WebGLRenderer","antialias","alpha","setClearColor","setPixelRatio","min","devicePixelRatio","setAnimationLoop","enableDamping","value","side","DoubleSide","colorB","type","Color","colorA","ShaderMaterial","extensions","derivatives","fragmentShader","axesHelper","AxesHelper","globeGeo","SphereBufferGeometry","material","MeshBasicMaterial","TextureLoader","load","globe","Mesh","point1","lng","point2","point3","point4","flight","i","length","pos","mesh","color","pos1","getCurve","appendChild","domElement","state","startTime","clock","masterCubeArr","document","getElementsByClassName","p1","p2","v1","v2","points","p","lerpVectors","multiplyScalar","push","path","CatmullRomCurve3","geometry","TubeGeometry","RawShaderMaterial"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n// import './styles/App.scss';\nimport * as THREE from \"three\";\nimport * as _ from \"lodash\";\n// import Moment from 'react-moment';\nimport moment from \"moment\";\n// import map from \"./earth-dark.jpg\";\nimport map from \"./earthmap1k.jpg\";\n\n// import gsap from \"gsap\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { DragControls } from \"three/examples/jsm/controls/DragControls\";\nimport { shuffle, isWinningCombination } from \"./helper/helper\";\nimport { rubik_colors, color_opt_array } from \"./cubes/colors\";\nimport {\n  getDraggableIntersectionsOfSelectedSq,\n  getAvailableSqByDirection,\n} from \"./helper/intersects\";\n// import { generateGameboardCubes, generateMasterCubes } from './cubes/gameboard';\n// import { generateMasterCubeDisplay } from './controls/controls';\n\nimport lFragment from \"./utils/shader/line_fragment.glsl\";\nimport lVertex from \"./utils/shader/line_vertex.glsl\";\n\n// // import vertex from \"./shader/vertex.glsl‚Äù;\nimport {\n  BsChevronDown,\n  BsChevronLeft,\n  BsChevronRight,\n  BsChevronUp,\n} from \"react-icons/bs\";\nimport { FiMenu } from \"react-icons/fi\";\n\n// debuger\n// const gui = new dat.GUI({ closed: true });\n\nconst globeRadius = 3;\n// global\nlet camera, dragControls, scene, renderer, appEl;\nlet controls;\nlet cubes = [];\nlet globeGroup;\nlet materialShader;\n// let setInervalTimer;\n\nlet masterGameMap = new Map();\nconst boardGameMap = new Map();\n\nconst game_map_row1 = new Map();\nconst game_map_row2 = new Map();\nconst game_map_row3 = new Map();\n\nconst boardGameMap_row1 = new Map();\nconst boardGameMap_row2 = new Map();\nconst boardGameMap_row3 = new Map();\n\nmasterGameMap.set(0, game_map_row1);\nmasterGameMap.set(1, game_map_row2);\nmasterGameMap.set(2, game_map_row3);\n\nboardGameMap.set(0, boardGameMap_row1);\nboardGameMap.set(1, boardGameMap_row2);\nboardGameMap.set(2, boardGameMap_row3);\n\nclass Globe extends Component {\n  constructor() {\n    super();\n    this.state = {\n      startTime: 0,\n      clock: 0,\n      masterCubeArr: [],\n    };\n  }\n\n  componentDidMount() {\n    appEl = document.getElementsByClassName(\"webgl\")[0];\n    this.init();\n    this.bindResize();\n    this.bindKeyPress();\n  }\n\n  bindKeyPress = () => {\n    window.addEventListener(\"keydown\", (e) => {\n      e.preventDefault();\n\n      let isAnimating = false;\n\n      if (!this.debouncedFn) {\n        this.debouncedFn = _.debounce((key) => {\n          switch (key) {\n            case \"ArrowLeft\": // left\n              break;\n\n            case \"ArrowUp\": // up\n              break;\n\n            case \"ArrowRight\": // right\n              break;\n\n            case \"ArrowDown\": // down\n              break;\n            default:\n              return; // exit this handler\n          }\n        }, 100);\n      }\n\n      if (!isAnimating) {\n        isAnimating = true;\n        this.debouncedFn(e.key);\n      }\n    });\n  };\n\n  bindResize = () => {\n    window.addEventListener(\"resize\", (e) => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    });\n  };\n\n  generateGridHelper = () => {\n    var standardPlaneNormal = new THREE.Vector3(0, 0, 1);\n    var GridHelperPlaneNormal = new THREE.Vector3(0, 1, 0);\n    var GridHelperPlaneMaster = new THREE.Vector3(0, 1, 0);\n\n    var quaternion = new THREE.Quaternion();\n    quaternion.setFromUnitVectors(standardPlaneNormal, GridHelperPlaneNormal);\n\n    var masterQuaternion = new THREE.Quaternion();\n    masterQuaternion.setFromUnitVectors(\n      standardPlaneNormal,\n      GridHelperPlaneMaster\n    );\n\n    var largeGridGuide = new THREE.GridHelper(10, 10);\n    largeGridGuide.rotation.setFromQuaternion(quaternion);\n\n    scene.add(largeGridGuide);\n  };\n\n  animation = (_time) => {\n    if (this.materialShader) {\n      this.materialShader.uniforms.time = _time;\n    }\n\n    cubes.forEach((o) => {\n      o.userData.update(o);\n    });\n\n    controls.update();\n    renderer.render(scene, camera);\n  };\n\n  calcPosFromLatLonRadN = (lat, lon, radius) => {\n    const phi = lat * (Math.PI / 180);\n    const theta = -lon * (Math.PI / 180);\n\n    var x = radius * Math.cos(phi) * Math.cos(theta);\n    var y = radius * Math.cos(phi) * Math.sin(theta);\n    var z = radius * Math.sin(phi);\n    return { x, y, z };\n  };\n\n  vertexShader = () => {\n    return `\n          varying vec3 vUv; \n      \n          void main() {\n            vUv = position; \n      \n            vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);\n            gl_Position = projectionMatrix * modelViewPosition; \n          }\n        `;\n  };\n\n  //   gl_FragColor =  vec4(vUv.y, 0, 0, 1.0)\n  fragShader = () => {\n    return `\n        uniform vec3 colorA; \n        uniform vec3 colorB; \n        varying vec3 vUv;\n  \n        void main() {\n                float dash = sin(vUv.x*50)\n                if(dash<0) discard;\n        gl_FragColor = vec4(vUv.y, 0, 0, 1.0);\n        }\n    `;\n  };\n\n  init = () => {\n    globeGroup = new THREE.Group();\n    camera = new THREE.PerspectiveCamera(\n      90,\n      window.innerWidth / window.innerHeight,\n      0.01,\n      100\n    );\n    camera.position.z = 6;\n    scene = new THREE.Scene();\n\n    renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n    renderer.setClearColor(0x000000, 0); // the default\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 1));\n    renderer.setAnimationLoop(this.animation);\n\n    controls = new OrbitControls(camera, appEl);\n    controls.enableDamping = true;\n\n    let uniforms = {\n      time: { value: 0 },\n      side: THREE.DoubleSide,\n      colorB: { type: \"vec3\", value: new THREE.Color(0xacb6e5) },\n      colorA: { type: \"vec3\", value: new THREE.Color(0x74ebd5) },\n    };\n\n    materialShader = new THREE.ShaderMaterial({\n      extensions: {\n        derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n      },\n      side: THREE.DoubleSide,\n      uniforms: uniforms,\n      fragmentShader: this.fragShader(),\n      vertexShader: this.vertexShader(),\n    });\n\n    // materialShader = new THREE.ShaderMaterial({\n    //   extensions: {\n    //     derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n    //   },\n    //   side: THREE.DoubleSide,\n    //   uniforms: {\n    //     time: { value: 0 },\n    //     resolution: { value: new THREE.Vector4() },\n    //     colorB: {type: 'vec3', value: new THREE.Color(0xACB6E5)},\n    //     colorA: {type: 'vec3', value: new THREE.Color(0x74ebd5)}\n    //   },\n    //   wireframe: true,\n    //   transparent: true,\n    //   vertexShader: this.vertexShader(),\n    //   fragmentShader: this.fragShader(),\n    // });\n\n    // setup Map\n\n    const axesHelper = new THREE.AxesHelper(5);\n    scene.add(axesHelper);\n\n    const globeGeo = new THREE.SphereBufferGeometry(globeRadius);\n    const material = new THREE.MeshBasicMaterial({\n      map: new THREE.TextureLoader().load(map),\n    });\n\n    const globe = new THREE.Mesh(globeGeo, material);\n\n    //     const atl = [33.749, -84];\n    //     const chi = [41.8781, -87.6298];\n\n    //     const atlv = this.calcPosFromLatLonRadN(atl[0], atl[1], globeRadius);\n    //     let atlMesh = new THREE.Mesh(\n    //       new THREE.SphereBufferGeometry(0.03, 20, 20),\n    //       new THREE.MeshBasicMaterial({ color: 0xad1001 })\n    //     );\n    //     atlMesh.position.set(atlv.x, atlv.z, atlv.y);\n    //     globeGroup.add(atlMesh);\n\n    //     const chiV = this.calcPosFromLatLonRadN(chi[0], chi[1], globeRadius);\n    //     let chiMesh = new THREE.Mesh(\n    //       new THREE.SphereBufferGeometry(0.03, 20, 20),\n    //       new THREE.MeshBasicMaterial({ color: 0xf04e37 })\n    //     );\n    //     chiMesh.position.set(chiV.x, chiV.z, chiV.y);\n    //     globeGroup.add(chiMesh);\n    globeGroup.add(globe);\n\n    // Atl\n    let point1 = {\n      lat: 33.749,\n      lng: -84,\n    };\n\n    // Chi\n    let point2 = {\n      lat: 41.8781,\n      lng: -87.6298,\n    };\n\n    // LA\n    let point3 = {\n      lat: 34.0522,\n      lng: -118.2437,\n    };\n\n    //\n    let point4 = {\n      lat: 35.6762,\n      lng: 139.6503,\n    };\n\n    let flight = [point1, point2, point3, point4];\n\n    for (var i = 0; i < flight.length; i++) {\n      let pos = this.calcPosFromLatLonRadN(\n        flight[i].lat,\n        flight[i].lng,\n        globeRadius\n      );\n\n      let mesh = new THREE.Mesh(\n        new THREE.SphereBufferGeometry(0.03, 20, 20),\n        new THREE.MeshBasicMaterial({ color: 0xff0000 })\n        // this.material\n      );\n      mesh.position.set(pos.x, pos.z, pos.y);\n      scene.add(mesh);\n\n      if (i < flight.length - 1) {\n        let pos1 = this.calcPosFromLatLonRadN(\n          flight[i + 1].lat,\n          flight[i + 1].lng,\n          globeRadius\n        );\n        this.getCurve(pos, pos1);\n      }\n    }\n    scene.add(globeGroup);\n    appEl.appendChild(renderer.domElement);\n  };\n\n  getCurve(p1, p2) {\n    let v1 = new THREE.Vector3(p1.x, p1.z, p1.y);\n    let v2 = new THREE.Vector3(p2.x, p2.z, p2.y);\n    let points = [];\n\n    for (let i = 0; i <= 20; i++) {\n      let p = new THREE.Vector3().lerpVectors(v1, v2, i / 20);\n      //       console.log(\"getCurve ==> \", p);\n//       p.normalize()\n      p.multiplyScalar(1 + 0.51 * Math.sin((Math.PI * i) / 20));\n      points.push(p);\n    }\n    let path = new THREE.CatmullRomCurve3(points, false);\n\n    const geometry = new THREE.TubeGeometry(path, 72, 0.005, 8, false);\n\n    let uniforms = {\n      time: { value: 0 },\n      side: THREE.DoubleSide,\n      colorB: { type: \"vec3\", value: new THREE.Color(0xacb6e5) },\n      colorA: { type: \"vec3\", value: new THREE.Color(0x74ebd5) },\n    };\n\n//     const material = new THREE.ShaderMaterial({\n//       extensions: {\n//         derivatives: \"#extension GL_OES_standard_derivatives : enable\",\n//       },\n//       side: THREE.DoubleSide,\n//       uniforms: uniforms,\n//       fragmentShader: fragment,\n//       vertexShader: this.vertexShader(),\n//     });\n\n    const material = new THREE.RawShaderMaterial({\n        vertexShader:lVertex,\n        fragmentShader: lFragment\n    })\n\n    const mesh = new THREE.Mesh(geometry, material);\n    globeGroup.add(mesh);\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"webgl\"></div>\n      </>\n    );\n  }\n}\n\nexport default Globe;\n"]},"metadata":{},"sourceType":"module"}