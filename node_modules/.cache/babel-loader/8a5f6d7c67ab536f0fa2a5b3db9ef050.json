{"ast":null,"code":"var _jsxFileName = \"/Users/drewstephenson/Documents/3DPortIntel/src/Globe.js\";\nimport React, { Component } from \"react\"; // import './styles/App.scss';\n\nimport * as THREE from \"three\";\nimport * as _ from \"lodash\"; // import Moment from 'react-moment';\n\nimport moment from \"moment\";\nimport map from \"./earth-dark.jpg\"; // import gsap from \"gsap\";\n\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { DragControls } from \"three/examples/jsm/controls/DragControls\";\nimport { shuffle, isWinningCombination } from \"./helper/helper\";\nimport { rubik_colors, color_opt_array } from \"./cubes/colors\";\nimport { getDraggableIntersectionsOfSelectedSq, getAvailableSqByDirection } from \"./helper/intersects\"; // import { generateGameboardCubes, generateMasterCubes } from './cubes/gameboard';\n// import { generateMasterCubeDisplay } from './controls/controls';\n\nimport { BsChevronDown, BsChevronLeft, BsChevronRight, BsChevronUp } from \"react-icons/bs\";\nimport { FiMenu } from \"react-icons/fi\"; // debuger\n// const gui = new dat.GUI({ closed: true });\n// global\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet camera, dragControls, scene, renderer, appEl;\nlet controls;\nlet cubes = [];\nlet globeGroup; // let setInervalTimer;\n\nlet masterGameMap = new Map();\nconst boardGameMap = new Map();\nconst game_map_row1 = new Map();\nconst game_map_row2 = new Map();\nconst game_map_row3 = new Map();\nconst boardGameMap_row1 = new Map();\nconst boardGameMap_row2 = new Map();\nconst boardGameMap_row3 = new Map();\nmasterGameMap.set(0, game_map_row1);\nmasterGameMap.set(1, game_map_row2);\nmasterGameMap.set(2, game_map_row3);\nboardGameMap.set(0, boardGameMap_row1);\nboardGameMap.set(1, boardGameMap_row2);\nboardGameMap.set(2, boardGameMap_row3);\n\nclass Globe extends Component {\n  constructor() {\n    super();\n\n    this.bindKeyPress = () => {\n      window.addEventListener(\"keydown\", e => {\n        e.preventDefault();\n        let isAnimating = false;\n\n        if (!this.debouncedFn) {\n          this.debouncedFn = _.debounce(key => {\n            switch (key) {\n              case \"ArrowLeft\":\n                // left\n                break;\n\n              case \"ArrowUp\":\n                // up\n                break;\n\n              case \"ArrowRight\":\n                // right\n                break;\n\n              case \"ArrowDown\":\n                // down\n                break;\n\n              default:\n                return;\n              // exit this handler\n            }\n          }, 100);\n        }\n\n        if (!isAnimating) {\n          isAnimating = true;\n          this.debouncedFn(e.key);\n        }\n      });\n    };\n\n    this.bindResize = () => {\n      window.addEventListener(\"resize\", e => {\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n      });\n    };\n\n    this.generateGridHelper = () => {\n      var standardPlaneNormal = new THREE.Vector3(0, 0, 1);\n      var GridHelperPlaneNormal = new THREE.Vector3(0, 1, 0);\n      var GridHelperPlaneMaster = new THREE.Vector3(0, 1, 0);\n      var quaternion = new THREE.Quaternion();\n      quaternion.setFromUnitVectors(standardPlaneNormal, GridHelperPlaneNormal);\n      var masterQuaternion = new THREE.Quaternion();\n      masterQuaternion.setFromUnitVectors(standardPlaneNormal, GridHelperPlaneMaster);\n      var largeGridGuide = new THREE.GridHelper(10, 10);\n      largeGridGuide.rotation.setFromQuaternion(quaternion);\n      scene.add(largeGridGuide);\n    };\n\n    this.animation = _time => {\n      cubes.forEach(o => {\n        o.userData.update(o);\n      });\n      controls.update();\n      renderer.render(scene, camera);\n    };\n\n    this.calcPosFromLatLonRad = (lat, lon) => {\n      var phi = lat * (Math.PI / 180);\n      var theta = (lon + 180) * (Math.PI / 180);\n      let x = -(Math.cos(phi) * Math.cos(theta));\n      let z = Math.cos(phi) * Math.sin(theta);\n      let y = Math.sin(phi);\n      return {\n        x,\n        y,\n        z\n      };\n    };\n\n    this.init = () => {\n      globeGroup = new THREE.Group();\n      camera = new THREE.PerspectiveCamera(90, window.innerWidth / window.innerHeight, 0.01, 100);\n      camera.position.z = 6;\n      scene = new THREE.Scene();\n      renderer = new THREE.WebGLRenderer({\n        antialias: true,\n        alpha: true\n      }); // renderer.setClearColor( 0x000000, 0 ); // the default\n\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      renderer.setPixelRatio(Math.min(window.devicePixelRatio, 1));\n      renderer.setAnimationLoop(this.animation);\n      controls = new OrbitControls(camera, appEl);\n      controls.enableDamping = true; // setup Map\n\n      const globeGeo = new THREE.SphereBufferGeometry(1);\n      const material = new THREE.MeshBasicMaterial({\n        map: new THREE.TextureLoader().load(map)\n      });\n      const globe = new THREE.Mesh(globeGeo, material);\n      let mesh = new THREE.Mesh(new THREE.SphereBufferGeometry(0.1, 20, 20), new THREE.MeshBasicMaterial({\n        color: 0xad1001\n      }));\n      let lat = 33.7490;\n      let lon = 84.3880;\n      const {\n        x,\n        y,\n        z\n      } = this.calcPosFromLatLonRad(lat, lon);\n      mesh.position.set(x, -z, y);\n      globeGroup.add(mesh);\n      globeGroup.add(globe);\n      scene.add(globeGroup); //     this.generateCubes();\n      // generateGameboardCubes(scene, camera, renderer, controls);\n      //     this.generateMasterCubes(scene);\n      // this.generateGridHelper();\n      //     this.startClock();\n\n      appEl.appendChild(renderer.domElement);\n    };\n\n    this.state = {\n      startTime: 0,\n      clock: 0,\n      masterCubeArr: []\n    };\n  }\n\n  componentDidMount() {\n    appEl = document.getElementsByClassName(\"webgl\")[0];\n    this.init();\n    this.bindResize();\n    this.bindKeyPress();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"webgl\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport default Globe;","map":{"version":3,"sources":["/Users/drewstephenson/Documents/3DPortIntel/src/Globe.js"],"names":["React","Component","THREE","_","moment","map","OrbitControls","DragControls","shuffle","isWinningCombination","rubik_colors","color_opt_array","getDraggableIntersectionsOfSelectedSq","getAvailableSqByDirection","BsChevronDown","BsChevronLeft","BsChevronRight","BsChevronUp","FiMenu","camera","dragControls","scene","renderer","appEl","controls","cubes","globeGroup","masterGameMap","Map","boardGameMap","game_map_row1","game_map_row2","game_map_row3","boardGameMap_row1","boardGameMap_row2","boardGameMap_row3","set","Globe","constructor","bindKeyPress","window","addEventListener","e","preventDefault","isAnimating","debouncedFn","debounce","key","bindResize","aspect","innerWidth","innerHeight","updateProjectionMatrix","setSize","generateGridHelper","standardPlaneNormal","Vector3","GridHelperPlaneNormal","GridHelperPlaneMaster","quaternion","Quaternion","setFromUnitVectors","masterQuaternion","largeGridGuide","GridHelper","rotation","setFromQuaternion","add","animation","_time","forEach","o","userData","update","render","calcPosFromLatLonRad","lat","lon","phi","Math","PI","theta","x","cos","z","sin","y","init","Group","PerspectiveCamera","position","Scene","WebGLRenderer","antialias","alpha","setPixelRatio","min","devicePixelRatio","setAnimationLoop","enableDamping","globeGeo","SphereBufferGeometry","material","MeshBasicMaterial","TextureLoader","load","globe","Mesh","mesh","color","appendChild","domElement","state","startTime","clock","masterCubeArr","componentDidMount","document","getElementsByClassName"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n// import './styles/App.scss';\nimport * as THREE from \"three\";\nimport * as _ from \"lodash\";\n// import Moment from 'react-moment';\nimport moment from \"moment\";\nimport map from \"./earth-dark.jpg\";\n\n// import gsap from \"gsap\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { DragControls } from \"three/examples/jsm/controls/DragControls\";\nimport { shuffle, isWinningCombination } from \"./helper/helper\";\nimport { rubik_colors, color_opt_array } from \"./cubes/colors\";\nimport {\n  getDraggableIntersectionsOfSelectedSq,\n  getAvailableSqByDirection,\n} from \"./helper/intersects\";\n// import { generateGameboardCubes, generateMasterCubes } from './cubes/gameboard';\n// import { generateMasterCubeDisplay } from './controls/controls';\nimport {\n  BsChevronDown,\n  BsChevronLeft,\n  BsChevronRight,\n  BsChevronUp,\n} from \"react-icons/bs\";\nimport { FiMenu } from \"react-icons/fi\";\n\n// debuger\n// const gui = new dat.GUI({ closed: true });\n\n// global\nlet camera, dragControls, scene, renderer, appEl;\nlet controls;\nlet cubes = [];\nlet globeGroup;\n// let setInervalTimer;\n\nlet masterGameMap = new Map();\nconst boardGameMap = new Map();\n\nconst game_map_row1 = new Map();\nconst game_map_row2 = new Map();\nconst game_map_row3 = new Map();\n\nconst boardGameMap_row1 = new Map();\nconst boardGameMap_row2 = new Map();\nconst boardGameMap_row3 = new Map();\n\nmasterGameMap.set(0, game_map_row1);\nmasterGameMap.set(1, game_map_row2);\nmasterGameMap.set(2, game_map_row3);\n\nboardGameMap.set(0, boardGameMap_row1);\nboardGameMap.set(1, boardGameMap_row2);\nboardGameMap.set(2, boardGameMap_row3);\n\nclass Globe extends Component {\n  constructor() {\n    super();\n    this.state = {\n      startTime: 0,\n      clock: 0,\n      masterCubeArr: [],\n    };\n  }\n\n  componentDidMount() {\n    appEl = document.getElementsByClassName(\"webgl\")[0];\n    this.init();\n    this.bindResize();\n    this.bindKeyPress();\n  }\n\n  bindKeyPress = () => {\n    window.addEventListener(\"keydown\", (e) => {\n      e.preventDefault();\n\n      let isAnimating = false;\n\n      if (!this.debouncedFn) {\n        this.debouncedFn = _.debounce((key) => {\n          switch (key) {\n            case \"ArrowLeft\": // left\n              break;\n\n            case \"ArrowUp\": // up\n              break;\n\n            case \"ArrowRight\": // right\n              break;\n\n            case \"ArrowDown\": // down\n              break;\n            default:\n              return; // exit this handler\n          }\n        }, 100);\n      }\n\n      if (!isAnimating) {\n        isAnimating = true;\n        this.debouncedFn(e.key);\n      }\n    });\n  };\n\n  bindResize = () => {\n    window.addEventListener(\"resize\", (e) => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    });\n  };\n\n  generateGridHelper = () => {\n    var standardPlaneNormal = new THREE.Vector3(0, 0, 1);\n    var GridHelperPlaneNormal = new THREE.Vector3(0, 1, 0);\n    var GridHelperPlaneMaster = new THREE.Vector3(0, 1, 0);\n\n    var quaternion = new THREE.Quaternion();\n    quaternion.setFromUnitVectors(standardPlaneNormal, GridHelperPlaneNormal);\n\n    var masterQuaternion = new THREE.Quaternion();\n    masterQuaternion.setFromUnitVectors(\n      standardPlaneNormal,\n      GridHelperPlaneMaster\n    );\n\n    var largeGridGuide = new THREE.GridHelper(10, 10);\n    largeGridGuide.rotation.setFromQuaternion(quaternion);\n\n    scene.add(largeGridGuide);\n  };\n\n  animation = (_time) => {\n    cubes.forEach((o) => {\n      o.userData.update(o);\n    });\n\n    controls.update();\n    renderer.render(scene, camera);\n  };\n\n  // RIGHT!!!!\n  calcPosFromLatLonRad = (lat, lon) => {\n    var phi = lat * (Math.PI / 180);\n    var theta = (lon + 180) * (Math.PI / 180);\n    let x = -(Math.cos(phi) * Math.cos(theta));\n    let z = Math.cos(phi) * Math.sin(theta);\n    let y = Math.sin(phi);\n    return { x, y, z };\n  };\n\n  init = () => {\n    globeGroup = new THREE.Group();\n    camera = new THREE.PerspectiveCamera(\n      90,\n      window.innerWidth / window.innerHeight,\n      0.01,\n      100\n    );\n    camera.position.z = 6;\n    scene = new THREE.Scene();\n\n    renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n    // renderer.setClearColor( 0x000000, 0 ); // the default\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 1));\n    renderer.setAnimationLoop(this.animation);\n\n    controls = new OrbitControls(camera, appEl);\n    controls.enableDamping = true;\n\n    // setup Map\n\n    const globeGeo = new THREE.SphereBufferGeometry(1);\n    const material = new THREE.MeshBasicMaterial({\n      map: new THREE.TextureLoader().load(map),\n    });\n\n    const globe = new THREE.Mesh(globeGeo, material);\n\n    let mesh = new THREE.Mesh(\n      new THREE.SphereBufferGeometry(0.1, 20, 20),\n      new THREE.MeshBasicMaterial({ color: 0xad1001 })\n    );\n\n    let lat = 33.7490;\n    let lon = 84.3880;\n\n    const { x, y, z } = this.calcPosFromLatLonRad(lat, lon);\n\n    mesh.position.set(x, -z, y);\n    globeGroup.add(mesh);\n\n    globeGroup.add(globe);\n    scene.add(globeGroup);\n    //     this.generateCubes();\n\n    // generateGameboardCubes(scene, camera, renderer, controls);\n    //     this.generateMasterCubes(scene);\n    // this.generateGridHelper();\n\n    //     this.startClock();\n    appEl.appendChild(renderer.domElement);\n  };\n\n  render() {\n    return (\n      <>\n        <div className=\"webgl\"></div>\n      </>\n    );\n  }\n}\n\nexport default Globe;\n"]},"metadata":{},"sourceType":"module"}