{"ast":null,"code":"import _createClass from \"/Users/drewstephenson/Documents/3DPortIntel/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/drewstephenson/Documents/3DPortIntel/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _assertThisInitialized from \"/Users/drewstephenson/Documents/3DPortIntel/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/drewstephenson/Documents/3DPortIntel/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/drewstephenson/Documents/3DPortIntel/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { EventDispatcher, Matrix4, Plane, Raycaster, Vector2, Vector3 } from 'three';\n\nvar _plane = new Plane();\n\nvar _raycaster = new Raycaster();\n\nvar _pointer = new Vector2();\n\nvar _offset = new Vector3();\n\nvar _intersection = new Vector3();\n\nvar _worldPosition = new Vector3();\n\nvar _inverseMatrix = new Matrix4();\n\nvar DragControls = /*#__PURE__*/function (_EventDispatcher) {\n  _inherits(DragControls, _EventDispatcher);\n\n  var _super = _createSuper(DragControls);\n\n  function DragControls(_objects, _camera, _domElement) {\n    var _this;\n\n    _classCallCheck(this, DragControls);\n\n    _this = _super.call(this);\n    _domElement.style.touchAction = 'none'; // disable touch scroll\n\n    var _selected = null,\n        _hovered = null;\n    var _intersections = []; //\n\n    var scope = _assertThisInitialized(_this);\n\n    function activate() {\n      _domElement.addEventListener('pointermove', onPointerMove);\n\n      _domElement.addEventListener('pointerdown', onPointerDown);\n\n      _domElement.addEventListener('pointerup', onPointerCancel);\n\n      _domElement.addEventListener('pointerleave', onPointerCancel);\n    }\n\n    function deactivate() {\n      _domElement.removeEventListener('pointermove', onPointerMove);\n\n      _domElement.removeEventListener('pointerdown', onPointerDown);\n\n      _domElement.removeEventListener('pointerup', onPointerCancel);\n\n      _domElement.removeEventListener('pointerleave', onPointerCancel);\n\n      _domElement.style.cursor = '';\n    }\n\n    function dispose() {\n      deactivate();\n    }\n\n    function getObjects() {\n      return _objects;\n    }\n\n    function getRaycaster() {\n      return _raycaster;\n    }\n\n    function onPointerMove(event) {\n      if (scope.enabled === false) return;\n      updatePointer(event);\n\n      _raycaster.setFromCamera(_pointer, _camera);\n\n      if (_selected) {\n        if (_raycaster.ray.intersectPlane(_plane, _intersection)) {\n          _selected.position.copy(_intersection.sub(_offset).applyMatrix4(_inverseMatrix));\n        }\n\n        scope.dispatchEvent({\n          type: 'drag',\n          object: _selected\n        });\n        return;\n      } // hover support\n\n\n      if (event.pointerType === 'mouse' || event.pointerType === 'pen') {\n        _intersections.length = 0;\n\n        _raycaster.setFromCamera(_pointer, _camera);\n\n        _raycaster.intersectObjects(_objects, true, _intersections);\n\n        if (_intersections.length > 0) {\n          var object = _intersections[0].object;\n\n          _plane.setFromNormalAndCoplanarPoint(_camera.getWorldDirection(_plane.normal), _worldPosition.setFromMatrixPosition(object.matrixWorld));\n\n          if (_hovered !== object && _hovered !== null) {\n            scope.dispatchEvent({\n              type: 'hoveroff',\n              object: _hovered\n            });\n            _domElement.style.cursor = 'auto';\n            _hovered = null;\n          }\n\n          if (_hovered !== object) {\n            scope.dispatchEvent({\n              type: 'hoveron',\n              object: object\n            });\n            _domElement.style.cursor = 'pointer';\n            _hovered = object;\n          }\n        } else {\n          if (_hovered !== null) {\n            scope.dispatchEvent({\n              type: 'hoveroff',\n              object: _hovered\n            });\n            _domElement.style.cursor = 'auto';\n            _hovered = null;\n          }\n        }\n      }\n    }\n\n    function onPointerDown(event) {\n      if (scope.enabled === false) return;\n      updatePointer(event);\n      _intersections.length = 0;\n\n      _raycaster.setFromCamera(_pointer, _camera);\n\n      _raycaster.intersectObjects(_objects, true, _intersections);\n\n      if (_intersections.length > 0) {\n        _selected = scope.transformGroup === true ? _objects[0] : _intersections[0].object;\n\n        _plane.setFromNormalAndCoplanarPoint(_camera.getWorldDirection(_plane.normal), _worldPosition.setFromMatrixPosition(_selected.matrixWorld));\n\n        if (_raycaster.ray.intersectPlane(_plane, _intersection)) {\n          _inverseMatrix.copy(_selected.parent.matrixWorld).invert();\n\n          _offset.copy(_intersection).sub(_worldPosition.setFromMatrixPosition(_selected.matrixWorld));\n        }\n\n        _domElement.style.cursor = 'move';\n        scope.dispatchEvent({\n          type: 'dragstart',\n          object: _selected\n        });\n      }\n    }\n\n    function onPointerCancel() {\n      if (scope.enabled === false) return;\n\n      if (_selected) {\n        scope.dispatchEvent({\n          type: 'dragend',\n          object: _selected\n        });\n        _selected = null;\n      }\n\n      _domElement.style.cursor = _hovered ? 'pointer' : 'auto';\n    }\n\n    function updatePointer(event) {\n      var rect = _domElement.getBoundingClientRect();\n\n      _pointer.x = (event.clientX - rect.left) / rect.width * 2 - 1;\n      _pointer.y = -(event.clientY - rect.top) / rect.height * 2 + 1;\n    }\n\n    activate(); // API\n\n    _this.enabled = true;\n    _this.transformGroup = false;\n    _this.activate = activate;\n    _this.deactivate = deactivate;\n    _this.dispose = dispose;\n    _this.getObjects = getObjects;\n    _this.getRaycaster = getRaycaster;\n    return _this;\n  }\n\n  return _createClass(DragControls);\n}(EventDispatcher);\n\nexport { DragControls };","map":{"version":3,"sources":["/Users/drewstephenson/Documents/3DPortIntel/node_modules/three/examples/jsm/controls/DragControls.js"],"names":["EventDispatcher","Matrix4","Plane","Raycaster","Vector2","Vector3","_plane","_raycaster","_pointer","_offset","_intersection","_worldPosition","_inverseMatrix","DragControls","_objects","_camera","_domElement","style","touchAction","_selected","_hovered","_intersections","scope","activate","addEventListener","onPointerMove","onPointerDown","onPointerCancel","deactivate","removeEventListener","cursor","dispose","getObjects","getRaycaster","event","enabled","updatePointer","setFromCamera","ray","intersectPlane","position","copy","sub","applyMatrix4","dispatchEvent","type","object","pointerType","length","intersectObjects","setFromNormalAndCoplanarPoint","getWorldDirection","normal","setFromMatrixPosition","matrixWorld","transformGroup","parent","invert","rect","getBoundingClientRect","x","clientX","left","width","y","clientY","top","height"],"mappings":";;;;;AAAA,SACCA,eADD,EAECC,OAFD,EAGCC,KAHD,EAICC,SAJD,EAKCC,OALD,EAMCC,OAND,QAOO,OAPP;;AASA,IAAMC,MAAM,GAAG,IAAIJ,KAAJ,EAAf;;AACA,IAAMK,UAAU,GAAG,IAAIJ,SAAJ,EAAnB;;AAEA,IAAMK,QAAQ,GAAG,IAAIJ,OAAJ,EAAjB;;AACA,IAAMK,OAAO,GAAG,IAAIJ,OAAJ,EAAhB;;AACA,IAAMK,aAAa,GAAG,IAAIL,OAAJ,EAAtB;;AACA,IAAMM,cAAc,GAAG,IAAIN,OAAJ,EAAvB;;AACA,IAAMO,cAAc,GAAG,IAAIX,OAAJ,EAAvB;;IAEMY,Y;;;;;AAEL,wBAAaC,QAAb,EAAuBC,OAAvB,EAAgCC,WAAhC,EAA8C;AAAA;;AAAA;;AAE7C;AAEAA,IAAAA,WAAW,CAACC,KAAZ,CAAkBC,WAAlB,GAAgC,MAAhC,CAJ6C,CAIL;;AAExC,QAAIC,SAAS,GAAG,IAAhB;AAAA,QAAsBC,QAAQ,GAAG,IAAjC;AAEA,QAAMC,cAAc,GAAG,EAAvB,CAR6C,CAU7C;;AAEA,QAAMC,KAAK,gCAAX;;AAEA,aAASC,QAAT,GAAoB;AAEnBP,MAAAA,WAAW,CAACQ,gBAAZ,CAA8B,aAA9B,EAA6CC,aAA7C;;AACAT,MAAAA,WAAW,CAACQ,gBAAZ,CAA8B,aAA9B,EAA6CE,aAA7C;;AACAV,MAAAA,WAAW,CAACQ,gBAAZ,CAA8B,WAA9B,EAA2CG,eAA3C;;AACAX,MAAAA,WAAW,CAACQ,gBAAZ,CAA8B,cAA9B,EAA8CG,eAA9C;AAEA;;AAED,aAASC,UAAT,GAAsB;AAErBZ,MAAAA,WAAW,CAACa,mBAAZ,CAAiC,aAAjC,EAAgDJ,aAAhD;;AACAT,MAAAA,WAAW,CAACa,mBAAZ,CAAiC,aAAjC,EAAgDH,aAAhD;;AACAV,MAAAA,WAAW,CAACa,mBAAZ,CAAiC,WAAjC,EAA8CF,eAA9C;;AACAX,MAAAA,WAAW,CAACa,mBAAZ,CAAiC,cAAjC,EAAiDF,eAAjD;;AAEAX,MAAAA,WAAW,CAACC,KAAZ,CAAkBa,MAAlB,GAA2B,EAA3B;AAEA;;AAED,aAASC,OAAT,GAAmB;AAElBH,MAAAA,UAAU;AAEV;;AAED,aAASI,UAAT,GAAsB;AAErB,aAAOlB,QAAP;AAEA;;AAED,aAASmB,YAAT,GAAwB;AAEvB,aAAO1B,UAAP;AAEA;;AAED,aAASkB,aAAT,CAAwBS,KAAxB,EAAgC;AAE/B,UAAKZ,KAAK,CAACa,OAAN,KAAkB,KAAvB,EAA+B;AAE/BC,MAAAA,aAAa,CAAEF,KAAF,CAAb;;AAEA3B,MAAAA,UAAU,CAAC8B,aAAX,CAA0B7B,QAA1B,EAAoCO,OAApC;;AAEA,UAAKI,SAAL,EAAiB;AAEhB,YAAKZ,UAAU,CAAC+B,GAAX,CAAeC,cAAf,CAA+BjC,MAA/B,EAAuCI,aAAvC,CAAL,EAA8D;AAE7DS,UAAAA,SAAS,CAACqB,QAAV,CAAmBC,IAAnB,CAAyB/B,aAAa,CAACgC,GAAd,CAAmBjC,OAAnB,EAA6BkC,YAA7B,CAA2C/B,cAA3C,CAAzB;AAEA;;AAEDU,QAAAA,KAAK,CAACsB,aAAN,CAAqB;AAAEC,UAAAA,IAAI,EAAE,MAAR;AAAgBC,UAAAA,MAAM,EAAE3B;AAAxB,SAArB;AAEA;AAEA,OApB8B,CAsB/B;;;AAEA,UAAKe,KAAK,CAACa,WAAN,KAAsB,OAAtB,IAAiCb,KAAK,CAACa,WAAN,KAAsB,KAA5D,EAAoE;AAEnE1B,QAAAA,cAAc,CAAC2B,MAAf,GAAwB,CAAxB;;AAEAzC,QAAAA,UAAU,CAAC8B,aAAX,CAA0B7B,QAA1B,EAAoCO,OAApC;;AACAR,QAAAA,UAAU,CAAC0C,gBAAX,CAA6BnC,QAA7B,EAAuC,IAAvC,EAA6CO,cAA7C;;AAEA,YAAKA,cAAc,CAAC2B,MAAf,GAAwB,CAA7B,EAAiC;AAEhC,cAAMF,MAAM,GAAGzB,cAAc,CAAE,CAAF,CAAd,CAAoByB,MAAnC;;AAEAxC,UAAAA,MAAM,CAAC4C,6BAAP,CAAsCnC,OAAO,CAACoC,iBAAR,CAA2B7C,MAAM,CAAC8C,MAAlC,CAAtC,EAAkFzC,cAAc,CAAC0C,qBAAf,CAAsCP,MAAM,CAACQ,WAA7C,CAAlF;;AAEA,cAAKlC,QAAQ,KAAK0B,MAAb,IAAuB1B,QAAQ,KAAK,IAAzC,EAAgD;AAE/CE,YAAAA,KAAK,CAACsB,aAAN,CAAqB;AAAEC,cAAAA,IAAI,EAAE,UAAR;AAAoBC,cAAAA,MAAM,EAAE1B;AAA5B,aAArB;AAEAJ,YAAAA,WAAW,CAACC,KAAZ,CAAkBa,MAAlB,GAA2B,MAA3B;AACAV,YAAAA,QAAQ,GAAG,IAAX;AAEA;;AAED,cAAKA,QAAQ,KAAK0B,MAAlB,EAA2B;AAE1BxB,YAAAA,KAAK,CAACsB,aAAN,CAAqB;AAAEC,cAAAA,IAAI,EAAE,SAAR;AAAmBC,cAAAA,MAAM,EAAEA;AAA3B,aAArB;AAEA9B,YAAAA,WAAW,CAACC,KAAZ,CAAkBa,MAAlB,GAA2B,SAA3B;AACAV,YAAAA,QAAQ,GAAG0B,MAAX;AAEA;AAED,SAxBD,MAwBO;AAEN,cAAK1B,QAAQ,KAAK,IAAlB,EAAyB;AAExBE,YAAAA,KAAK,CAACsB,aAAN,CAAqB;AAAEC,cAAAA,IAAI,EAAE,UAAR;AAAoBC,cAAAA,MAAM,EAAE1B;AAA5B,aAArB;AAEAJ,YAAAA,WAAW,CAACC,KAAZ,CAAkBa,MAAlB,GAA2B,MAA3B;AACAV,YAAAA,QAAQ,GAAG,IAAX;AAEA;AAED;AAED;AAED;;AAED,aAASM,aAAT,CAAwBQ,KAAxB,EAAgC;AAE/B,UAAKZ,KAAK,CAACa,OAAN,KAAkB,KAAvB,EAA+B;AAE/BC,MAAAA,aAAa,CAAEF,KAAF,CAAb;AAEAb,MAAAA,cAAc,CAAC2B,MAAf,GAAwB,CAAxB;;AAEAzC,MAAAA,UAAU,CAAC8B,aAAX,CAA0B7B,QAA1B,EAAoCO,OAApC;;AACAR,MAAAA,UAAU,CAAC0C,gBAAX,CAA6BnC,QAA7B,EAAuC,IAAvC,EAA6CO,cAA7C;;AAEA,UAAKA,cAAc,CAAC2B,MAAf,GAAwB,CAA7B,EAAiC;AAEhC7B,QAAAA,SAAS,GAAKG,KAAK,CAACiC,cAAN,KAAyB,IAA3B,GAAoCzC,QAAQ,CAAE,CAAF,CAA5C,GAAoDO,cAAc,CAAE,CAAF,CAAd,CAAoByB,MAApF;;AAEAxC,QAAAA,MAAM,CAAC4C,6BAAP,CAAsCnC,OAAO,CAACoC,iBAAR,CAA2B7C,MAAM,CAAC8C,MAAlC,CAAtC,EAAkFzC,cAAc,CAAC0C,qBAAf,CAAsClC,SAAS,CAACmC,WAAhD,CAAlF;;AAEA,YAAK/C,UAAU,CAAC+B,GAAX,CAAeC,cAAf,CAA+BjC,MAA/B,EAAuCI,aAAvC,CAAL,EAA8D;AAE7DE,UAAAA,cAAc,CAAC6B,IAAf,CAAqBtB,SAAS,CAACqC,MAAV,CAAiBF,WAAtC,EAAoDG,MAApD;;AACAhD,UAAAA,OAAO,CAACgC,IAAR,CAAc/B,aAAd,EAA8BgC,GAA9B,CAAmC/B,cAAc,CAAC0C,qBAAf,CAAsClC,SAAS,CAACmC,WAAhD,CAAnC;AAEA;;AAEDtC,QAAAA,WAAW,CAACC,KAAZ,CAAkBa,MAAlB,GAA2B,MAA3B;AAEAR,QAAAA,KAAK,CAACsB,aAAN,CAAqB;AAAEC,UAAAA,IAAI,EAAE,WAAR;AAAqBC,UAAAA,MAAM,EAAE3B;AAA7B,SAArB;AAEA;AAGD;;AAED,aAASQ,eAAT,GAA2B;AAE1B,UAAKL,KAAK,CAACa,OAAN,KAAkB,KAAvB,EAA+B;;AAE/B,UAAKhB,SAAL,EAAiB;AAEhBG,QAAAA,KAAK,CAACsB,aAAN,CAAqB;AAAEC,UAAAA,IAAI,EAAE,SAAR;AAAmBC,UAAAA,MAAM,EAAE3B;AAA3B,SAArB;AAEAA,QAAAA,SAAS,GAAG,IAAZ;AAEA;;AAEDH,MAAAA,WAAW,CAACC,KAAZ,CAAkBa,MAAlB,GAA2BV,QAAQ,GAAG,SAAH,GAAe,MAAlD;AAEA;;AAED,aAASgB,aAAT,CAAwBF,KAAxB,EAAgC;AAE/B,UAAMwB,IAAI,GAAG1C,WAAW,CAAC2C,qBAAZ,EAAb;;AAEAnD,MAAAA,QAAQ,CAACoD,CAAT,GAAa,CAAE1B,KAAK,CAAC2B,OAAN,GAAgBH,IAAI,CAACI,IAAvB,IAAgCJ,IAAI,CAACK,KAArC,GAA6C,CAA7C,GAAiD,CAA9D;AACAvD,MAAAA,QAAQ,CAACwD,CAAT,GAAa,EAAI9B,KAAK,CAAC+B,OAAN,GAAgBP,IAAI,CAACQ,GAAzB,IAAiCR,IAAI,CAACS,MAAtC,GAA+C,CAA/C,GAAmD,CAAhE;AAEA;;AAED5C,IAAAA,QAAQ,GAtLqC,CAwL7C;;AAEA,UAAKY,OAAL,GAAe,IAAf;AACA,UAAKoB,cAAL,GAAsB,KAAtB;AAEA,UAAKhC,QAAL,GAAgBA,QAAhB;AACA,UAAKK,UAAL,GAAkBA,UAAlB;AACA,UAAKG,OAAL,GAAeA,OAAf;AACA,UAAKC,UAAL,GAAkBA,UAAlB;AACA,UAAKC,YAAL,GAAoBA,YAApB;AAjM6C;AAmM7C;;;EArMyBjC,e;;AAyM3B,SAASa,YAAT","sourcesContent":["import {\n\tEventDispatcher,\n\tMatrix4,\n\tPlane,\n\tRaycaster,\n\tVector2,\n\tVector3\n} from 'three';\n\nconst _plane = new Plane();\nconst _raycaster = new Raycaster();\n\nconst _pointer = new Vector2();\nconst _offset = new Vector3();\nconst _intersection = new Vector3();\nconst _worldPosition = new Vector3();\nconst _inverseMatrix = new Matrix4();\n\nclass DragControls extends EventDispatcher {\n\n\tconstructor( _objects, _camera, _domElement ) {\n\n\t\tsuper();\n\n\t\t_domElement.style.touchAction = 'none'; // disable touch scroll\n\n\t\tlet _selected = null, _hovered = null;\n\n\t\tconst _intersections = [];\n\n\t\t//\n\n\t\tconst scope = this;\n\n\t\tfunction activate() {\n\n\t\t\t_domElement.addEventListener( 'pointermove', onPointerMove );\n\t\t\t_domElement.addEventListener( 'pointerdown', onPointerDown );\n\t\t\t_domElement.addEventListener( 'pointerup', onPointerCancel );\n\t\t\t_domElement.addEventListener( 'pointerleave', onPointerCancel );\n\n\t\t}\n\n\t\tfunction deactivate() {\n\n\t\t\t_domElement.removeEventListener( 'pointermove', onPointerMove );\n\t\t\t_domElement.removeEventListener( 'pointerdown', onPointerDown );\n\t\t\t_domElement.removeEventListener( 'pointerup', onPointerCancel );\n\t\t\t_domElement.removeEventListener( 'pointerleave', onPointerCancel );\n\n\t\t\t_domElement.style.cursor = '';\n\n\t\t}\n\n\t\tfunction dispose() {\n\n\t\t\tdeactivate();\n\n\t\t}\n\n\t\tfunction getObjects() {\n\n\t\t\treturn _objects;\n\n\t\t}\n\n\t\tfunction getRaycaster() {\n\n\t\t\treturn _raycaster;\n\n\t\t}\n\n\t\tfunction onPointerMove( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tupdatePointer( event );\n\n\t\t\t_raycaster.setFromCamera( _pointer, _camera );\n\n\t\t\tif ( _selected ) {\n\n\t\t\t\tif ( _raycaster.ray.intersectPlane( _plane, _intersection ) ) {\n\n\t\t\t\t\t_selected.position.copy( _intersection.sub( _offset ).applyMatrix4( _inverseMatrix ) );\n\n\t\t\t\t}\n\n\t\t\t\tscope.dispatchEvent( { type: 'drag', object: _selected } );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// hover support\n\n\t\t\tif ( event.pointerType === 'mouse' || event.pointerType === 'pen' ) {\n\n\t\t\t\t_intersections.length = 0;\n\n\t\t\t\t_raycaster.setFromCamera( _pointer, _camera );\n\t\t\t\t_raycaster.intersectObjects( _objects, true, _intersections );\n\n\t\t\t\tif ( _intersections.length > 0 ) {\n\n\t\t\t\t\tconst object = _intersections[ 0 ].object;\n\n\t\t\t\t\t_plane.setFromNormalAndCoplanarPoint( _camera.getWorldDirection( _plane.normal ), _worldPosition.setFromMatrixPosition( object.matrixWorld ) );\n\n\t\t\t\t\tif ( _hovered !== object && _hovered !== null ) {\n\n\t\t\t\t\t\tscope.dispatchEvent( { type: 'hoveroff', object: _hovered } );\n\n\t\t\t\t\t\t_domElement.style.cursor = 'auto';\n\t\t\t\t\t\t_hovered = null;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( _hovered !== object ) {\n\n\t\t\t\t\t\tscope.dispatchEvent( { type: 'hoveron', object: object } );\n\n\t\t\t\t\t\t_domElement.style.cursor = 'pointer';\n\t\t\t\t\t\t_hovered = object;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( _hovered !== null ) {\n\n\t\t\t\t\t\tscope.dispatchEvent( { type: 'hoveroff', object: _hovered } );\n\n\t\t\t\t\t\t_domElement.style.cursor = 'auto';\n\t\t\t\t\t\t_hovered = null;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onPointerDown( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tupdatePointer( event );\n\n\t\t\t_intersections.length = 0;\n\n\t\t\t_raycaster.setFromCamera( _pointer, _camera );\n\t\t\t_raycaster.intersectObjects( _objects, true, _intersections );\n\n\t\t\tif ( _intersections.length > 0 ) {\n\n\t\t\t\t_selected = ( scope.transformGroup === true ) ? _objects[ 0 ] : _intersections[ 0 ].object;\n\n\t\t\t\t_plane.setFromNormalAndCoplanarPoint( _camera.getWorldDirection( _plane.normal ), _worldPosition.setFromMatrixPosition( _selected.matrixWorld ) );\n\n\t\t\t\tif ( _raycaster.ray.intersectPlane( _plane, _intersection ) ) {\n\n\t\t\t\t\t_inverseMatrix.copy( _selected.parent.matrixWorld ).invert();\n\t\t\t\t\t_offset.copy( _intersection ).sub( _worldPosition.setFromMatrixPosition( _selected.matrixWorld ) );\n\n\t\t\t\t}\n\n\t\t\t\t_domElement.style.cursor = 'move';\n\n\t\t\t\tscope.dispatchEvent( { type: 'dragstart', object: _selected } );\n\n\t\t\t}\n\n\n\t\t}\n\n\t\tfunction onPointerCancel() {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tif ( _selected ) {\n\n\t\t\t\tscope.dispatchEvent( { type: 'dragend', object: _selected } );\n\n\t\t\t\t_selected = null;\n\n\t\t\t}\n\n\t\t\t_domElement.style.cursor = _hovered ? 'pointer' : 'auto';\n\n\t\t}\n\n\t\tfunction updatePointer( event ) {\n\n\t\t\tconst rect = _domElement.getBoundingClientRect();\n\n\t\t\t_pointer.x = ( event.clientX - rect.left ) / rect.width * 2 - 1;\n\t\t\t_pointer.y = - ( event.clientY - rect.top ) / rect.height * 2 + 1;\n\n\t\t}\n\n\t\tactivate();\n\n\t\t// API\n\n\t\tthis.enabled = true;\n\t\tthis.transformGroup = false;\n\n\t\tthis.activate = activate;\n\t\tthis.deactivate = deactivate;\n\t\tthis.dispose = dispose;\n\t\tthis.getObjects = getObjects;\n\t\tthis.getRaycaster = getRaycaster;\n\n\t}\n\n}\n\nexport { DragControls };\n"]},"metadata":{},"sourceType":"module"}