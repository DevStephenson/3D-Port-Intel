[{"/Users/drewstephenson/Documents/3DPortIntel/src/index.js":"1","/Users/drewstephenson/Documents/3DPortIntel/src/App.js":"2","/Users/drewstephenson/Documents/3DPortIntel/src/reportWebVitals.js":"3","/Users/drewstephenson/Documents/3DPortIntel/src/Globe.js":"4","/Users/drewstephenson/Documents/3DPortIntel/src/helper/intersects.js":"5","/Users/drewstephenson/Documents/3DPortIntel/src/helper/helper.js":"6","/Users/drewstephenson/Documents/3DPortIntel/src/cubes/colors.js":"7"},{"size":531,"mtime":1646671631053,"results":"8","hashOfConfig":"9"},{"size":411,"mtime":1646677134489,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1646348796418,"results":"11","hashOfConfig":"9"},{"size":14987,"mtime":1646724181886,"results":"12","hashOfConfig":"9"},{"size":5904,"mtime":1646674560450,"results":"13","hashOfConfig":"9"},{"size":860,"mtime":1646674675962,"results":"14","hashOfConfig":"9"},{"size":678,"mtime":1646674728887,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"7j9v87",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"19"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"19"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"/Users/drewstephenson/Documents/3DPortIntel/src/index.js",[],[],["40","41"],"/Users/drewstephenson/Documents/3DPortIntel/src/App.js",["42"],[],"import logo from './logo.svg';\nimport './App.css';\nimport { Typography } from '@material-ui/core';\nimport Globe from './Globe';\nimport { FiMenu } from 'react-icons/fi';\n\nfunction App() {\n\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Typography variant=\"h4\">Port Intel </Typography>\n        <FiMenu/>\n      </header>\n      <Globe/>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/drewstephenson/Documents/3DPortIntel/src/reportWebVitals.js",[],[],"/Users/drewstephenson/Documents/3DPortIntel/src/Globe.js",["43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62"],[],"/Users/drewstephenson/Documents/3DPortIntel/src/helper/intersects.js",["63"],[],"import * as THREE from \"three\";\nimport gsap from \"gsap\";\n\nlet cubeSize = 1;\n\nconst getIntersects = (originPoint, cubes, direction) => {\n  const intersectsResults = [];\n  const raycaster = new THREE.Raycaster();\n  const rayOrigin = new THREE.Vector3(originPoint.x, originPoint.y, 0);\n  let rayDirection;\n\n  switch (direction) {\n    case \"T\":\n      rayDirection = new THREE.Vector3(0, 2, 0).normalize();\n      break;\n\n    case \"R\":\n      rayDirection = new THREE.Vector3(2, 0, 0).normalize();\n      break;\n\n    case \"B\":\n      rayDirection = new THREE.Vector3(0, -2, 0).normalize();\n      break;\n\n    case \"L\":\n      rayDirection = new THREE.Vector3(-2, 0, 0).normalize();\n      break;\n\n    default:\n      break;\n  }\n\n  raycaster.set(rayOrigin, rayDirection);\n  const instersects = raycaster.intersectObjects(cubes)\n    .filter((mesh) => mesh.object.userData.color !== undefined);\n\n\n  if (instersects.length > 0) {\n    let distantIntersect = false;\n\n    if (instersects[0].distance > 1) {\n      distantIntersect = true\n    }\n    if (distantIntersect) {\n      intersectsResults.push(false);\n    } else {\n      intersectsResults.push(true);\n    }\n  } else {\n    intersectsResults.push(false);\n  }\n\n  return intersectsResults;\n}\n\nconst getDraggableIntersectionsOfSelectedSq = (originPoint, cubes) => {\n  const rayOrigin = new THREE.Vector3(originPoint.x, originPoint.y, 0);\n\n  const raycasterLeft = new THREE.Raycaster();\n  const raycasterTop = new THREE.Raycaster();\n  const raycasterRight = new THREE.Raycaster();\n  const raycasterBottom = new THREE.Raycaster();\n\n  const rayDirectionLeft = new THREE.Vector3(-2, 0, 0).normalize();\n  const rayDirectionTop = new THREE.Vector3(0, 2, 0).normalize();\n  const rayDirectionRight = new THREE.Vector3(2, 0, 0).normalize();\n  const rayDirectionBottom = new THREE.Vector3(0, -2, 0).normalize();\n\n  raycasterLeft.set(rayOrigin, rayDirectionLeft);\n  raycasterTop.set(rayOrigin, rayDirectionTop);\n  raycasterRight.set(rayOrigin, rayDirectionRight);\n  raycasterBottom.set(rayOrigin, rayDirectionBottom);\n\n  const instersectsLeft = raycasterLeft\n    .intersectObjects(cubes)\n    .filter((mesh) => mesh.object.userData.color !== undefined);\n  const instersectsTop = raycasterTop\n    .intersectObjects(cubes)\n    .filter((mesh) => mesh.object.userData.color !== undefined);\n  const instersectsRight = raycasterRight\n    .intersectObjects(cubes)\n    .filter((mesh) => mesh.object.userData.color !== undefined);\n  const instersectsBottom = raycasterBottom\n    .intersectObjects(cubes)\n    .filter((mesh) => mesh.object.userData.color !== undefined);\n\n  let intersectsResults = [];\n\n\n  if (instersectsTop.length > 0) {\n    const closeIntersections = instersectsTop.filter(\n      (intersect) => intersect.distance <= 0.5\n    );\n\n    if (closeIntersections.length > 0) {\n      intersectsResults.push({ T: originPoint.y });\n    } else {\n      if (instersectsTop.length > 0) {\n        intersectsResults.push({\n          T: originPoint.y + instersectsTop[0].distance - cubeSize / 2,\n        });\n      } else {\n        //\n      }\n    }\n  }\n\n  if (instersectsRight.length > 0) {\n    const closeIntersections = instersectsRight.filter(\n      (intersect) => intersect.distance <= 0.5\n    );\n    if (closeIntersections.length > 0) {\n      intersectsResults.push({ R: originPoint.x });\n    } else {\n      if (instersectsRight.length > 0) {\n        intersectsResults.push({\n          R: originPoint.x + instersectsRight[0].distance - cubeSize / 2,\n        });\n      }\n    }\n  }\n\n  if (instersectsBottom.length > 0) {\n    const closeIntersections = instersectsBottom.filter(\n      (intersect) => intersect.distance <= 0.5\n    );\n\n    if (closeIntersections.length > 0) {\n      intersectsResults.push({ B: originPoint.y });\n    } else {\n      if (instersectsBottom.length > 0) {\n        intersectsResults.push({\n          B: originPoint.y - instersectsBottom[0].distance + cubeSize / 2,\n        });\n      }\n    }\n  }\n\n  if (instersectsLeft.length > 0) {\n    const closeIntersections = instersectsLeft.filter(\n      (intersect) => intersect.distance <= 0.5\n    );\n\n    if (closeIntersections.length > 0) {\n      intersectsResults.push({ L: originPoint.x });\n    } else {\n      if (instersectsLeft.length > 0) {\n        intersectsResults.push({\n          L: originPoint.x - instersectsLeft[0].distance + cubeSize / 2,\n        });\n      }\n    }\n  }\n\n  return intersectsResults;\n}\n\nconst getAvailableSqByDirection = (cubes, direction) => {\n  cubes.filter(cube => {\n    var originPoint = cube.position.clone();\n    const intersects = getIntersects(originPoint, cubes, direction);\n    var found = false;\n    \n    for (var i = 0; i < intersects.length; i++) {\n      if (intersects[i]) {\n        found = intersects[i];\n        break;\n      } else {\n\n        const _duration = .1;\n        const _delay = 0;\n        const _easing = 'power2.out';\n\n        switch (direction) {\n          case \"T\":\n            // cube.position.y = cube.position.y + 1;\n            gsap.to(cube.position, { duration: _duration, delay: _delay, y: cube.position.y + 1, ease: _easing })\n            break;\n\n          case \"R\":\n            gsap.to(cube.position, { duration: _duration, delay: _delay, x: cube.position.x + 1, ease: _easing })\n            // cube.position.x = cube.position.x + 1;\n            break;\n\n          case \"B\":\n            // cube.position.y = cube.position.y - 1;\n            gsap.to(cube.position, { duration: _duration, delay: _delay, y: cube.position.y - 1, ease: _easing })\n            break;\n\n          case \"L\":\n            // cube.position.x = cube.position.x - 1;\n            gsap.to(cube.position, { duration: _duration, delay: _delay, x: cube.position.x - 1, ease: _easing })\n            break;\n\n          default:\n            break;\n        }\n\n      }\n    }\n\n    if (!found) {\n      return cube;\n    }\n  });\n}\n\nexport { getDraggableIntersectionsOfSelectedSq, getAvailableSqByDirection };","/Users/drewstephenson/Documents/3DPortIntel/src/helper/helper.js",[],[],"/Users/drewstephenson/Documents/3DPortIntel/src/cubes/colors.js",[],[],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":1,"column":8,"nodeType":"70","messageId":"71","endLine":1,"endColumn":12},{"ruleId":"68","severity":1,"message":"72","line":6,"column":8,"nodeType":"70","messageId":"71","endLine":6,"endColumn":14},{"ruleId":"68","severity":1,"message":"73","line":9,"column":8,"nodeType":"70","messageId":"71","endLine":9,"endColumn":15},{"ruleId":"68","severity":1,"message":"74","line":15,"column":10,"nodeType":"70","messageId":"71","endLine":15,"endColumn":22},{"ruleId":"68","severity":1,"message":"75","line":16,"column":10,"nodeType":"70","messageId":"71","endLine":16,"endColumn":17},{"ruleId":"68","severity":1,"message":"76","line":16,"column":19,"nodeType":"70","messageId":"71","endLine":16,"endColumn":39},{"ruleId":"68","severity":1,"message":"77","line":17,"column":10,"nodeType":"70","messageId":"71","endLine":17,"endColumn":22},{"ruleId":"68","severity":1,"message":"78","line":17,"column":24,"nodeType":"70","messageId":"71","endLine":17,"endColumn":39},{"ruleId":"68","severity":1,"message":"79","line":19,"column":3,"nodeType":"70","messageId":"71","endLine":19,"endColumn":40},{"ruleId":"68","severity":1,"message":"80","line":20,"column":3,"nodeType":"70","messageId":"71","endLine":20,"endColumn":28},{"ruleId":"68","severity":1,"message":"81","line":27,"column":8,"nodeType":"70","messageId":"71","endLine":27,"endColumn":17},{"ruleId":"68","severity":1,"message":"82","line":28,"column":8,"nodeType":"70","messageId":"71","endLine":28,"endColumn":15},{"ruleId":"68","severity":1,"message":"83","line":32,"column":3,"nodeType":"70","messageId":"71","endLine":32,"endColumn":16},{"ruleId":"68","severity":1,"message":"84","line":33,"column":3,"nodeType":"70","messageId":"71","endLine":33,"endColumn":16},{"ruleId":"68","severity":1,"message":"85","line":34,"column":3,"nodeType":"70","messageId":"71","endLine":34,"endColumn":17},{"ruleId":"68","severity":1,"message":"86","line":35,"column":3,"nodeType":"70","messageId":"71","endLine":35,"endColumn":14},{"ruleId":"68","severity":1,"message":"87","line":37,"column":10,"nodeType":"70","messageId":"71","endLine":37,"endColumn":16},{"ruleId":"68","severity":1,"message":"88","line":44,"column":13,"nodeType":"70","messageId":"71","endLine":44,"endColumn":25},{"ruleId":"68","severity":1,"message":"89","line":48,"column":5,"nodeType":"70","messageId":"71","endLine":48,"endColumn":19},{"ruleId":"68","severity":1,"message":"90","line":408,"column":9,"nodeType":"70","messageId":"71","endLine":408,"endColumn":15},{"ruleId":"68","severity":1,"message":"91","line":492,"column":9,"nodeType":"70","messageId":"71","endLine":492,"endColumn":17},{"ruleId":"92","severity":1,"message":"93","line":159,"column":21,"nodeType":"94","messageId":"95","endLine":159,"endColumn":23},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'moment' is defined but never used.","'mapDark' is defined but never used.","'DragControls' is defined but never used.","'shuffle' is defined but never used.","'isWinningCombination' is defined but never used.","'rubik_colors' is defined but never used.","'color_opt_array' is defined but never used.","'getDraggableIntersectionsOfSelectedSq' is defined but never used.","'getAvailableSqByDirection' is defined but never used.","'lFragment' is defined but never used.","'lVertex' is defined but never used.","'BsChevronDown' is defined but never used.","'BsChevronLeft' is defined but never used.","'BsChevronRight' is defined but never used.","'BsChevronUp' is defined but never used.","'FiMenu' is defined but never used.","'dragControls' is defined but never used.","'materialShader' is assigned a value but never used.","'flight' is assigned a value but never used.","'uniforms' is assigned a value but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]